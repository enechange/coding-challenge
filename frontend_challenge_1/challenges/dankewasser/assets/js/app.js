!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./js/app.js")}({"./js/_data/_formSelectTable.js":
/*!**************************************!*\
  !*** ./js/_data/_formSelectTable.js ***!
  \**************************************/
/*! exports provided: formSelectTable */function(e,t,n){"use strict";n.r(t),n.d(t,"formSelectTable",(function(){return o}));var o={provider:[{name:"東京電力",value:"tepco"},{name:"北海道電力",value:"hepco"},{name:"東北電力",value:"tohoku-epco"},{name:"中部電力",value:"chuden"},{name:"北陸電力",value:"rikuden"},{name:"関西電力",value:"kepco"},{name:"中国電力",value:"energia"},{name:"四国電力",value:"yonden"},{name:"九州電力",value:"kyuden"},{name:"沖縄電力",value:"okiden"},{name:"その他",value:"other"}],providerToPref:{tepco:{pref:[{name:"東京都",value:"tokyo"},{name:"その他",value:"other"}]},hepco:{pref:[{name:"北海道",value:"hokkaido"},{name:"その他",value:"other"}]},"tohoku-epco":{pref:[{name:"宮城県",value:"miyagi"},{name:"その他",value:"other"}]},chuden:{pref:[{name:"長野県",value:"nagano"},{name:"その他",value:"other"}]},rikuden:{pref:[{name:"富山県",value:"toyama"},{name:"その他",value:"other"}]},kepco:{pref:[{name:"大阪府",value:"osaka"},{name:"その他",value:"other"}]},energia:{pref:[{name:"広島県",value:"hiroshima"},{name:"その他",value:"other"}]},yonden:{pref:[{name:"徳島県",value:"tokushima"},{name:"その他",value:"other"}]},kyuden:{pref:[{name:"福岡県",value:"fukuoka"},{name:"その他",value:"other"}]},okiden:{pref:[{name:"沖縄県",value:"okinawa"},{name:"その他",value:"other"}]},other:{pref:[{name:"その他",value:"other"}]}}}},"./js/_modules/FormController/FormController.js?vue&type=script&lang=js&":
/*!*******************************************************************************!*\
  !*** ./js/_modules/FormController/FormController.js?vue&type=script&lang=js& ***!
  \*******************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../node_modules/babel-loader/lib??ref--3!../../../node_modules/eslint-loader??ref--0!./FormController.js?vue&type=script&lang=js& */"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/FormController.js?vue&type=script&lang=js&");t.default=o.default},"./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug&":
/*!***********************************************************************************************!*\
  !*** ./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug& ***!
  \***********************************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/pug-plain-loader!./FormController.pug?vue&type=template&id=3997cf50&lang=pug& */"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug&");n.d(t,"render",(function(){return o.render})),n.d(t,"staticRenderFns",(function(){return o.staticRenderFns}))},"./js/_modules/FormController/FormController.vue":
/*!*******************************************************!*\
  !*** ./js/_modules/FormController/FormController.vue ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! ./FormController.pug?vue&type=template&id=3997cf50&lang=pug& */"./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug&"),r=n(/*! ./FormController.js?vue&type=script&lang=js& */"./js/_modules/FormController/FormController.js?vue&type=script&lang=js&"),s=n(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */"./node_modules/vue-loader/lib/runtime/componentNormalizer.js"),i=Object(s.default)(r.default,o.render,o.staticRenderFns,!1,null,null,null);i.options.__file="js/_modules/FormController/FormController.vue",t.default=i.exports},"./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js&":
/*!***********************************************************************************************!*\
  !*** ./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js& ***!
  \***********************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../../../node_modules/babel-loader/lib??ref--3!../../../../../node_modules/eslint-loader??ref--0!./InputText.js?vue&type=script&lang=js& */"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js&");t.default=o.default},"./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug&":
/*!***************************************************************************************************************!*\
  !*** ./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug& ***!
  \***************************************************************************************************************/
/*! exports provided: render, staticRenderFns */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/pug-plain-loader!./InputText.pug?vue&type=template&id=310bc416&lang=pug& */"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug&");n.d(t,"render",(function(){return o.render})),n.d(t,"staticRenderFns",(function(){return o.staticRenderFns}))},"./js/_modules/FormController/components/InputText/InputText.vue":
/*!***********************************************************************!*\
  !*** ./js/_modules/FormController/components/InputText/InputText.vue ***!
  \***********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! ./InputText.pug?vue&type=template&id=310bc416&lang=pug& */"./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug&"),r=n(/*! ./InputText.js?vue&type=script&lang=js& */"./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js&"),s=n(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */"./node_modules/vue-loader/lib/runtime/componentNormalizer.js"),i=Object(s.default)(r.default,o.render,o.staticRenderFns,!1,null,null,null);i.options.__file="js/_modules/FormController/components/InputText/InputText.vue",t.default=i.exports},"./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js&":
/*!*****************************************************************************************!*\
  !*** ./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js& ***!
  \*****************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../../../node_modules/babel-loader/lib??ref--3!../../../../../node_modules/eslint-loader??ref--0!./Select.js?vue&type=script&lang=js& */"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js&");t.default=o.default},"./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug&":
/*!*********************************************************************************************************!*\
  !*** ./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug& ***!
  \*********************************************************************************************************/
/*! exports provided: render, staticRenderFns */function(e,t,n){"use strict";n.r(t);var o=n(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/pug-plain-loader!./Select.pug?vue&type=template&id=521c34e6&lang=pug& */"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug&");n.d(t,"render",(function(){return o.render})),n.d(t,"staticRenderFns",(function(){return o.staticRenderFns}))},"./js/_modules/FormController/components/Select/Select.vue":
/*!*****************************************************************!*\
  !*** ./js/_modules/FormController/components/Select/Select.vue ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var o=n(/*! ./Select.pug?vue&type=template&id=521c34e6&lang=pug& */"./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug&"),r=n(/*! ./Select.js?vue&type=script&lang=js& */"./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js&"),s=n(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */"./node_modules/vue-loader/lib/runtime/componentNormalizer.js"),i=Object(s.default)(r.default,o.render,o.staticRenderFns,!1,null,null,null);i.options.__file="js/_modules/FormController/components/Select/Select.vue",t.default=i.exports},"./js/_modules/_scroller.js":
/*!**********************************!*\
  !*** ./js/_modules/_scroller.js ***!
  \**********************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));n(/*! core-js/modules/es6.object.define-property */"./node_modules/core-js/modules/es6.object.define-property.js");function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;this.$button=$(".js-Scroller"),this.$button.on("click",(function(t){return t.preventDefault(),e.scroll($(t.currentTarget)),!1}))}},{key:"scroll",value:function(e){var t=e.attr("href"),n=$("#"===t||""===t?"html":t);$("body,html").animate({scrollTop:n.offset().top},300,"swing")}}])&&o(t.prototype,n),r&&o(t,r),e}()},"./js/_modules/_setViewport.js":
/*!*************************************!*\
  !*** ./js/_modules/_setViewport.js ***!
  \*************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e,t;(e=window.navigator.userAgent,t={},t.isIPhone=/iPhone/i.test(e),t.isIPad=/iPad/i.test(e),t.isWindowsPhone=/Windows Phone/i.test(e),t.isWindowsTablet=/Windows/i.test(e)&&/Touch/i.test(e)&&!/Tablet PC/i.test(e),t.isAndroid=/Android/i.test(e)&&!e.isWindowsPhone,t.isAndroidMobile=t.isAndroid&&/Mobile/i.test(e),t.isAndroidTablet=t.isAndroid&&!t.isAndroidMobile,t.isBlackBerry=/BlackBerry+/i.test(e),t.isBlackBerryTablet=/PlayBook+/i.test(e),t.isMobile=t.isIPhone||t.isWindowsPhone||t.isAndroidMobile||t.isBlackBerry,t.isTablet=t.isIPad||t.isWindowsTablet||t.isAndroidTablet||t.isBlackBerryTablet,t).isTablet&&$('meta[name="viewport"]').attr("content","width=1024")}},"./js/_modules/_slider.js":
/*!********************************!*\
  !*** ./js/_modules/_slider.js ***!
  \********************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){$(".js-Slider").slick({autoplay:!0,autoplaySpeed:5e3,dots:!1,arrows:!0,variableWidth:!0,infinite:!1,slidesToShow:3,responsive:[{breakpoint:699,settings:{slidesToShow:1,centerMode:!0}}]})}},"./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);n(/*! core-js/modules/es6.promise */"./node_modules/core-js/modules/es6.promise.js"),n(/*! core-js/modules/es6.object.to-string */"./node_modules/core-js/modules/es6.object.to-string.js");var o=n(/*! vue */"./node_modules/vue/dist/vue.runtime.esm.js"),r=n(/*! ./_modules/FormController/FormController.vue */"./js/_modules/FormController/FormController.vue"),s=n(/*! ./_modules/_slider */"./js/_modules/_slider.js"),i=n(/*! ./_modules/_scroller */"./js/_modules/_scroller.js"),a=n(/*! ./_modules/_setViewport */"./js/_modules/_setViewport.js");window.Promise=Promise,o.default.config.productionTip=!1,function(){$((function(){var e=document.getElementById("js-FormController");e&&new o.default({render:function(e){return e(r.default)}}).$mount(e),(new i.default).init();new s.default}));new a.default}()},"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/FormController.js?vue&type=script&lang=js&":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--3!./node_modules/eslint-loader??ref--0!./js/_modules/FormController/FormController.js?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);n(/*! core-js/modules/es6.regexp.match */"./node_modules/core-js/modules/es6.regexp.match.js"),n(/*! core-js/modules/web.dom.iterable */"./node_modules/core-js/modules/web.dom.iterable.js"),n(/*! core-js/modules/es6.array.iterator */"./node_modules/core-js/modules/es6.array.iterator.js"),n(/*! core-js/modules/es7.object.values */"./node_modules/core-js/modules/es7.object.values.js"),n(/*! core-js/modules/es6.promise */"./node_modules/core-js/modules/es6.promise.js"),n(/*! core-js/modules/es6.object.to-string */"./node_modules/core-js/modules/es6.object.to-string.js");var o=n(/*! vue */"./node_modules/vue/dist/vue.runtime.esm.js"),r=n(/*! ./components/InputText/InputText.vue */"./js/_modules/FormController/components/InputText/InputText.vue"),s=n(/*! ./components/Select/Select.vue */"./js/_modules/FormController/components/Select/Select.vue"),i=n(/*! ../../_data/_formSelectTable */"./js/_data/_formSelectTable.js");window.Promise=Promise,o.default.config.productionTip=!1,t.default={components:{InputText:r.default,Select:s.default},data:function(){return{selectList:{provider:i.formSelectTable.provider,pref:i.formSelectTable.providerToPref},sendValues:{provider:"tepco",pref:"",company:"",name:"",phone:"",email:""},validateStatus:{provider:{validateType:"text",isValid:!0},pref:{validateType:"text",isValid:!0},company:{validateType:"text",isValid:!0},name:{validateType:"text",isValid:!0},phone:{validateType:"text",isValid:!0},email:{validateType:"email",isValid:!0}}}},computed:{getProviderList:function(){return this.selectList.provider},getPrefList:function(){return[{name:"お選びください",value:""}].concat(this.selectList.pref[this.sendValues.provider].pref)}},methods:{changeSendValue:function(e,t){this.$set(this.sendValues,e,t),this.validate(e)},onChangeList:function(e){this.$set(this.sendValues,e,"")},validateAll:function(){for(var e in this.sendValues)this.validate(e);for(var t=!0,n=0,o=Object.values(this.validateStatus);n<o.length;n++){o[n].isValid||(t=!1)}return t},validate:function(e){var t=!1;switch(this.validateStatus[e].validateType){case"text":""!==this.sendValues[e]&&(t=!0);break;case"email":this.sendValues[e].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/)&&(t=!0);break;default:t=!0}this.$set(this.validateStatus[e],"isValid",t)},onSubmit:function(){this.validateAll()&&alert("入力エラーがないため送信します（テストゆえ送信しないため仮に表示）")}}}},"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--3!./node_modules/eslint-loader??ref--0!./js/_modules/FormController/components/InputText/InputText.js?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);n(/*! core-js/modules/es6.function.name */"./node_modules/core-js/modules/es6.function.name.js");t.default={name:"InputText",props:{name:String,type:String,heading:String,placeholder:String,errorMessage:String,currentValue:String,isValid:Boolean},computed:{inputted:{get:function(){return this.currentValue},set:function(e){this.inputted!==e&&this.$emit("change-value",this.name,e)}}}}},"./node_modules/babel-loader/lib/index.js?!./node_modules/eslint-loader/index.js?!./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--3!./node_modules/eslint-loader??ref--0!./js/_modules/FormController/components/Select/Select.js?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);n(/*! core-js/modules/es6.function.name */"./node_modules/core-js/modules/es6.function.name.js");t.default={name:"Select",props:{name:String,heading:String,list:Array,errorMessage:String,childList:String,currentValue:String,isValid:Boolean},computed:{selected:{get:function(){return this.currentValue},set:function(e){this.selected!==e&&(this.childList&&this.$emit("change-list",this.childList),this.$emit("change-value",this.name,e))}}}}},"./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},"./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("unscopables"),r=Array.prototype;null==r[o]&&n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js")(r,o,{}),e.exports=function(e){r[o][e]=!0}},"./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n,o){if(!(e instanceof t)||void 0!==o&&o in e)throw TypeError(n+": incorrect invocation!");return e}},"./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_is-object */"./node_modules/core-js/modules/_is-object.js");e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},"./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_to-iobject */"./node_modules/core-js/modules/_to-iobject.js"),r=n(/*! ./_to-length */"./node_modules/core-js/modules/_to-length.js"),s=n(/*! ./_to-absolute-index */"./node_modules/core-js/modules/_to-absolute-index.js");e.exports=function(e){return function(t,n,i){var a,u=o(t),l=r(u.length),c=s(i,l);if(e&&n!=n){for(;l>c;)if((a=u[c++])!=a)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},"./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_cof */"./node_modules/core-js/modules/_cof.js"),r=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("toStringTag"),s="Arguments"==o(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),r))?n:s?o(t):"Object"==(i=o(t))&&"function"==typeof t.callee?"Arguments":i}},"./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},"./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){var n=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},"./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_a-function */"./node_modules/core-js/modules/_a-function.js");e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},"./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},"./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){e.exports=!n(/*! ./_fails */"./node_modules/core-js/modules/_fails.js")((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},"./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_is-object */"./node_modules/core-js/modules/_is-object.js"),r=n(/*! ./_global */"./node_modules/core-js/modules/_global.js").document,s=o(r)&&o(r.createElement);e.exports=function(e){return s?r.createElement(e):{}}},"./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},"./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),r=n(/*! ./_core */"./node_modules/core-js/modules/_core.js"),s=n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js"),i=n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js"),a=n(/*! ./_ctx */"./node_modules/core-js/modules/_ctx.js"),u=function(e,t,n){var l,c,d,f,p=e&u.F,m=e&u.G,v=e&u.S,h=e&u.P,_=e&u.B,y=m?o:v?o[t]||(o[t]={}):(o[t]||{}).prototype,j=m?r:r[t]||(r[t]={}),g=j.prototype||(j.prototype={});for(l in m&&(n=t),n)d=((c=!p&&y&&void 0!==y[l])?y:n)[l],f=_&&c?a(d,o):h&&"function"==typeof d?a(Function.call,d):d,y&&i(y,l,d,e&u.U),j[l]!=d&&s(j,l,f),h&&g[l]!=d&&(g[l]=d)};o.core=r,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},"./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},"./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js"),r=n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js"),s=n(/*! ./_fails */"./node_modules/core-js/modules/_fails.js"),i=n(/*! ./_defined */"./node_modules/core-js/modules/_defined.js"),a=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js");e.exports=function(e,t,n){var u=a(e),l=n(i,u,""[e]),c=l[0],d=l[1];s((function(){var t={};return t[u]=function(){return 7},7!=""[e](t)}))&&(r(String.prototype,e,c),o(RegExp.prototype,u,2==t?function(e,t){return d.call(e,this,t)}:function(e){return d.call(e,this)}))}},"./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_ctx */"./node_modules/core-js/modules/_ctx.js"),r=n(/*! ./_iter-call */"./node_modules/core-js/modules/_iter-call.js"),s=n(/*! ./_is-array-iter */"./node_modules/core-js/modules/_is-array-iter.js"),i=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),a=n(/*! ./_to-length */"./node_modules/core-js/modules/_to-length.js"),u=n(/*! ./core.get-iterator-method */"./node_modules/core-js/modules/core.get-iterator-method.js"),l={},c={};(t=e.exports=function(e,t,n,d,f){var p,m,v,h,_=f?function(){return e}:u(e),y=o(n,d,t?2:1),j=0;if("function"!=typeof _)throw TypeError(e+" is not iterable!");if(s(_)){for(p=a(e.length);p>j;j++)if((h=t?y(i(m=e[j])[0],m[1]):y(e[j]))===l||h===c)return h}else for(v=_.call(e);!(m=v.next()).done;)if((h=r(v,y,m.value,t))===l||h===c)return h}).BREAK=l,t.RETURN=c},"./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},"./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},"./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js"),r=n(/*! ./_property-desc */"./node_modules/core-js/modules/_property-desc.js");e.exports=n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js")?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},"./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js").document;e.exports=o&&o.documentElement},"./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){e.exports=!n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js")&&!n(/*! ./_fails */"./node_modules/core-js/modules/_fails.js")((function(){return 7!=Object.defineProperty(n(/*! ./_dom-create */"./node_modules/core-js/modules/_dom-create.js")("div"),"a",{get:function(){return 7}}).a}))},"./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n){var o=void 0===n;switch(t.length){case 0:return o?e():e.call(n);case 1:return o?e(t[0]):e.call(n,t[0]);case 2:return o?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return o?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return o?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},"./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_cof */"./node_modules/core-js/modules/_cof.js");e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},"./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_iterators */"./node_modules/core-js/modules/_iterators.js"),r=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("iterator"),s=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||s[r]===e)}},"./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},"./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js");e.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){var s=e.return;throw void 0!==s&&o(s.call(e)),t}}},"./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_object-create */"./node_modules/core-js/modules/_object-create.js"),r=n(/*! ./_property-desc */"./node_modules/core-js/modules/_property-desc.js"),s=n(/*! ./_set-to-string-tag */"./node_modules/core-js/modules/_set-to-string-tag.js"),i={};n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js")(i,n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=o(i,{next:r(1,n)}),s(e,t+" Iterator")}},"./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_library */"./node_modules/core-js/modules/_library.js"),r=n(/*! ./_export */"./node_modules/core-js/modules/_export.js"),s=n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js"),i=n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js"),a=n(/*! ./_iterators */"./node_modules/core-js/modules/_iterators.js"),u=n(/*! ./_iter-create */"./node_modules/core-js/modules/_iter-create.js"),l=n(/*! ./_set-to-string-tag */"./node_modules/core-js/modules/_set-to-string-tag.js"),c=n(/*! ./_object-gpo */"./node_modules/core-js/modules/_object-gpo.js"),d=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,m,v,h,_){u(n,t,m);var y,j,g,b=function(e){if(!f&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+" Iterator",x="values"==v,C=!1,k=e.prototype,S=k[d]||k["@@iterator"]||v&&k[v],A=S||b(v),$=v?x?b("entries"):A:void 0,T="Array"==t&&k.entries||S;if(T&&(g=c(T.call(new e)))!==Object.prototype&&g.next&&(l(g,w,!0),o||"function"==typeof g[d]||i(g,d,p)),x&&S&&"values"!==S.name&&(C=!0,A=function(){return S.call(this)}),o&&!_||!f&&!C&&k[d]||i(k,d,A),a[t]=A,a[w]=p,v)if(y={values:x?A:b("values"),keys:h?A:b("keys"),entries:$},_)for(j in y)j in k||s(k,j,y[j]);else r(r.P+r.F*(f||C),t,y);return y}},"./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("iterator"),r=!1;try{var s=[7][o]();s.return=function(){r=!0},Array.from(s,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!r)return!1;var n=!1;try{var s=[7],i=s[o]();i.next=function(){return{done:n=!0}},s[o]=function(){return i},e(s)}catch(e){}return n}},"./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},"./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */function(e,t){e.exports={}},"./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */function(e,t){e.exports=!1},"./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),r=n(/*! ./_task */"./node_modules/core-js/modules/_task.js").set,s=o.MutationObserver||o.WebKitMutationObserver,i=o.process,a=o.Promise,u="process"==n(/*! ./_cof */"./node_modules/core-js/modules/_cof.js")(i);e.exports=function(){var e,t,n,l=function(){var o,r;for(u&&(o=i.domain)&&o.exit();e;){r=e.fn,e=e.next;try{r()}catch(o){throw e?n():t=void 0,o}}t=void 0,o&&o.enter()};if(u)n=function(){i.nextTick(l)};else if(!s||o.navigator&&o.navigator.standalone)if(a&&a.resolve){var c=a.resolve(void 0);n=function(){c.then(l)}}else n=function(){r.call(o,l)};else{var d=!0,f=document.createTextNode("");new s(l).observe(f,{characterData:!0}),n=function(){f.data=d=!d}}return function(o){var r={fn:o,next:void 0};t&&(t.next=r),e||(e=r,n()),t=r}}},"./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_a-function */"./node_modules/core-js/modules/_a-function.js");function r(e){var t,n;this.promise=new e((function(e,o){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=o})),this.resolve=o(t),this.reject=o(n)}e.exports.f=function(e){return new r(e)}},"./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),r=n(/*! ./_object-dps */"./node_modules/core-js/modules/_object-dps.js"),s=n(/*! ./_enum-bug-keys */"./node_modules/core-js/modules/_enum-bug-keys.js"),i=n(/*! ./_shared-key */"./node_modules/core-js/modules/_shared-key.js")("IE_PROTO"),a=function(){},u=function(){var e,t=n(/*! ./_dom-create */"./node_modules/core-js/modules/_dom-create.js")("iframe"),o=s.length;for(t.style.display="none",n(/*! ./_html */"./node_modules/core-js/modules/_html.js").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;o--;)delete u.prototype[s[o]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=o(e),n=new a,a.prototype=null,n[i]=e):n=u(),void 0===t?n:r(n,t)}},"./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),r=n(/*! ./_ie8-dom-define */"./node_modules/core-js/modules/_ie8-dom-define.js"),s=n(/*! ./_to-primitive */"./node_modules/core-js/modules/_to-primitive.js"),i=Object.defineProperty;t.f=n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js")?Object.defineProperty:function(e,t,n){if(o(e),t=s(t,!0),o(n),r)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},"./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js"),r=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),s=n(/*! ./_object-keys */"./node_modules/core-js/modules/_object-keys.js");e.exports=n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js")?Object.defineProperties:function(e,t){r(e);for(var n,i=s(t),a=i.length,u=0;a>u;)o.f(e,n=i[u++],t[n]);return e}},"./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_has */"./node_modules/core-js/modules/_has.js"),r=n(/*! ./_to-object */"./node_modules/core-js/modules/_to-object.js"),s=n(/*! ./_shared-key */"./node_modules/core-js/modules/_shared-key.js")("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=r(e),o(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},"./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_has */"./node_modules/core-js/modules/_has.js"),r=n(/*! ./_to-iobject */"./node_modules/core-js/modules/_to-iobject.js"),s=n(/*! ./_array-includes */"./node_modules/core-js/modules/_array-includes.js")(!1),i=n(/*! ./_shared-key */"./node_modules/core-js/modules/_shared-key.js")("IE_PROTO");e.exports=function(e,t){var n,a=r(e),u=0,l=[];for(n in a)n!=i&&o(a,n)&&l.push(n);for(;t.length>u;)o(a,n=t[u++])&&(~s(l,n)||l.push(n));return l}},"./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-keys-internal */"./node_modules/core-js/modules/_object-keys-internal.js"),r=n(/*! ./_enum-bug-keys */"./node_modules/core-js/modules/_enum-bug-keys.js");e.exports=Object.keys||function(e){return o(e,r)}},"./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t){t.f={}.propertyIsEnumerable},"./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-keys */"./node_modules/core-js/modules/_object-keys.js"),r=n(/*! ./_to-iobject */"./node_modules/core-js/modules/_to-iobject.js"),s=n(/*! ./_object-pie */"./node_modules/core-js/modules/_object-pie.js").f;e.exports=function(e){return function(t){for(var n,i=r(t),a=o(i),u=a.length,l=0,c=[];u>l;)s.call(i,n=a[l++])&&c.push(e?[n,i[n]]:i[n]);return c}}},"./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},"./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),r=n(/*! ./_is-object */"./node_modules/core-js/modules/_is-object.js"),s=n(/*! ./_new-promise-capability */"./node_modules/core-js/modules/_new-promise-capability.js");e.exports=function(e,t){if(o(e),r(t)&&t.constructor===e)return t;var n=s.f(e);return(0,n.resolve)(t),n.promise}},"./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},"./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js");e.exports=function(e,t,n){for(var r in t)o(e,r,t[r],n);return e}},"./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),r=n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js"),s=n(/*! ./_has */"./node_modules/core-js/modules/_has.js"),i=n(/*! ./_uid */"./node_modules/core-js/modules/_uid.js")("src"),a=Function.toString,u=(""+a).split("toString");n(/*! ./_core */"./node_modules/core-js/modules/_core.js").inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var l="function"==typeof n;l&&(s(n,"name")||r(n,"name",t)),e[t]!==n&&(l&&(s(n,i)||r(n,i,e[t]?""+e[t]:u.join(String(t)))),e===o?e[t]=n:a?e[t]?e[t]=n:r(e,t,n):(delete e[t],r(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[i]||a.call(this)}))},"./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),r=n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js"),s=n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js"),i=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("species");e.exports=function(e){var t=o[e];s&&t&&!t[i]&&r.f(t,i,{configurable:!0,get:function(){return this}})}},"./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js").f,r=n(/*! ./_has */"./node_modules/core-js/modules/_has.js"),s=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("toStringTag");e.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,s)&&o(e,s,{configurable:!0,value:t})}},"./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_shared */"./node_modules/core-js/modules/_shared.js")("keys"),r=n(/*! ./_uid */"./node_modules/core-js/modules/_uid.js");e.exports=function(e){return o[e]||(o[e]=r(e))}},"./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_core */"./node_modules/core-js/modules/_core.js"),r=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),s=r["__core-js_shared__"]||(r["__core-js_shared__"]={});(e.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:n(/*! ./_library */"./node_modules/core-js/modules/_library.js")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},"./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_an-object */"./node_modules/core-js/modules/_an-object.js"),r=n(/*! ./_a-function */"./node_modules/core-js/modules/_a-function.js"),s=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("species");e.exports=function(e,t){var n,i=o(e).constructor;return void 0===i||null==(n=o(i)[s])?t:r(n)}},"./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var o,r,s,i=n(/*! ./_ctx */"./node_modules/core-js/modules/_ctx.js"),a=n(/*! ./_invoke */"./node_modules/core-js/modules/_invoke.js"),u=n(/*! ./_html */"./node_modules/core-js/modules/_html.js"),l=n(/*! ./_dom-create */"./node_modules/core-js/modules/_dom-create.js"),c=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),d=c.process,f=c.setImmediate,p=c.clearImmediate,m=c.MessageChannel,v=c.Dispatch,h=0,_={},y=function(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}},j=function(e){y.call(e.data)};f&&p||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return _[++h]=function(){a("function"==typeof e?e:Function(e),t)},o(h),h},p=function(e){delete _[e]},"process"==n(/*! ./_cof */"./node_modules/core-js/modules/_cof.js")(d)?o=function(e){d.nextTick(i(y,e,1))}:v&&v.now?o=function(e){v.now(i(y,e,1))}:m?(s=(r=new m).port2,r.port1.onmessage=j,o=i(s.postMessage,s,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(o=function(e){c.postMessage(e+"","*")},c.addEventListener("message",j,!1)):o="onreadystatechange"in l("script")?function(e){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),y.call(e)}}:function(e){setTimeout(i(y,e,1),0)}),e.exports={set:f,clear:p}},"./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_to-integer */"./node_modules/core-js/modules/_to-integer.js"),r=Math.max,s=Math.min;e.exports=function(e,t){return(e=o(e))<0?r(e+t,0):s(e,t)}},"./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},"./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_iobject */"./node_modules/core-js/modules/_iobject.js"),r=n(/*! ./_defined */"./node_modules/core-js/modules/_defined.js");e.exports=function(e){return o(r(e))}},"./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_to-integer */"./node_modules/core-js/modules/_to-integer.js"),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},"./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_defined */"./node_modules/core-js/modules/_defined.js");e.exports=function(e){return Object(o(e))}},"./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_is-object */"./node_modules/core-js/modules/_is-object.js");e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},"./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},"./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_global */"./node_modules/core-js/modules/_global.js").navigator;e.exports=o&&o.userAgent||""},"./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_shared */"./node_modules/core-js/modules/_shared.js")("wks"),r=n(/*! ./_uid */"./node_modules/core-js/modules/_uid.js"),s=n(/*! ./_global */"./node_modules/core-js/modules/_global.js").Symbol,i="function"==typeof s;(e.exports=function(e){return o[e]||(o[e]=i&&s[e]||(i?s:r)("Symbol."+e))}).store=o},"./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_classof */"./node_modules/core-js/modules/_classof.js"),r=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("iterator"),s=n(/*! ./_iterators */"./node_modules/core-js/modules/_iterators.js");e.exports=n(/*! ./_core */"./node_modules/core-js/modules/_core.js").getIteratorMethod=function(e){if(null!=e)return e[r]||e["@@iterator"]||s[o(e)]}},"./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_add-to-unscopables */"./node_modules/core-js/modules/_add-to-unscopables.js"),r=n(/*! ./_iter-step */"./node_modules/core-js/modules/_iter-step.js"),s=n(/*! ./_iterators */"./node_modules/core-js/modules/_iterators.js"),i=n(/*! ./_to-iobject */"./node_modules/core-js/modules/_to-iobject.js");e.exports=n(/*! ./_iter-define */"./node_modules/core-js/modules/_iter-define.js")(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),s.Arguments=s.Array,o("keys"),o("values"),o("entries")},"./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js").f,r=Function.prototype,s=/^\s*function ([^ (]*)/;"name"in r||n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js")&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(s)[1]}catch(e){return""}}})},"./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_export */"./node_modules/core-js/modules/_export.js");o(o.S+o.F*!n(/*! ./_descriptors */"./node_modules/core-js/modules/_descriptors.js"),"Object",{defineProperty:n(/*! ./_object-dp */"./node_modules/core-js/modules/_object-dp.js").f})},"./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./_classof */"./node_modules/core-js/modules/_classof.js"),r={};r[n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("toStringTag")]="z",r+""!="[object z]"&&n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js")(Object.prototype,"toString",(function(){return"[object "+o(this)+"]"}),!0)},"./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,s,i,a=n(/*! ./_library */"./node_modules/core-js/modules/_library.js"),u=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),l=n(/*! ./_ctx */"./node_modules/core-js/modules/_ctx.js"),c=n(/*! ./_classof */"./node_modules/core-js/modules/_classof.js"),d=n(/*! ./_export */"./node_modules/core-js/modules/_export.js"),f=n(/*! ./_is-object */"./node_modules/core-js/modules/_is-object.js"),p=n(/*! ./_a-function */"./node_modules/core-js/modules/_a-function.js"),m=n(/*! ./_an-instance */"./node_modules/core-js/modules/_an-instance.js"),v=n(/*! ./_for-of */"./node_modules/core-js/modules/_for-of.js"),h=n(/*! ./_species-constructor */"./node_modules/core-js/modules/_species-constructor.js"),_=n(/*! ./_task */"./node_modules/core-js/modules/_task.js").set,y=n(/*! ./_microtask */"./node_modules/core-js/modules/_microtask.js")(),j=n(/*! ./_new-promise-capability */"./node_modules/core-js/modules/_new-promise-capability.js"),g=n(/*! ./_perform */"./node_modules/core-js/modules/_perform.js"),b=n(/*! ./_user-agent */"./node_modules/core-js/modules/_user-agent.js"),w=n(/*! ./_promise-resolve */"./node_modules/core-js/modules/_promise-resolve.js"),x=u.TypeError,C=u.process,k=C&&C.versions,S=k&&k.v8||"",A=u.Promise,$="process"==c(C),T=function(){},O=r=j.f,F=!!function(){try{var e=A.resolve(1),t=(e.constructor={})[n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js")("species")]=function(e){e(T,T)};return($||"function"==typeof PromiseRejectionEvent)&&e.then(T)instanceof t&&0!==S.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(e){}}(),I=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},E=function(e,t){if(!e._n){e._n=!0;var n=e._c;y((function(){for(var o=e._v,r=1==e._s,s=0,i=function(t){var n,s,i,a=r?t.ok:t.fail,u=t.resolve,l=t.reject,c=t.domain;try{a?(r||(2==e._h&&L(e),e._h=1),!0===a?n=o:(c&&c.enter(),n=a(o),c&&(c.exit(),i=!0)),n===t.promise?l(x("Promise-chain cycle")):(s=I(n))?s.call(n,u,l):u(n)):l(o)}catch(e){c&&!i&&c.exit(),l(e)}};n.length>s;)i(n[s++]);e._c=[],e._n=!1,t&&!e._h&&P(e)}))}},P=function(e){_.call(u,(function(){var t,n,o,r=e._v,s=M(e);if(s&&(t=g((function(){$?C.emit("unhandledRejection",r,e):(n=u.onunhandledrejection)?n({promise:e,reason:r}):(o=u.console)&&o.error&&o.error("Unhandled promise rejection",r)})),e._h=$||M(e)?2:1),e._a=void 0,s&&t.e)throw t.v}))},M=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){_.call(u,(function(){var t;$?C.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},N=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),E(t,!0))},D=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw x("Promise can't be resolved itself");(t=I(e))?y((function(){var o={_w:n,_d:!1};try{t.call(e,l(D,o,1),l(N,o,1))}catch(e){N.call(o,e)}})):(n._v=e,n._s=1,E(n,!1))}catch(e){N.call({_w:n,_d:!1},e)}}};F||(A=function(e){m(this,A,"Promise","_h"),p(e),o.call(this);try{e(l(D,this,1),l(N,this,1))}catch(e){N.call(this,e)}},(o=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(/*! ./_redefine-all */"./node_modules/core-js/modules/_redefine-all.js")(A.prototype,{then:function(e,t){var n=O(h(this,A));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=$?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&E(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),s=function(){var e=new o;this.promise=e,this.resolve=l(D,e,1),this.reject=l(N,e,1)},j.f=O=function(e){return e===A||e===i?new s(e):r(e)}),d(d.G+d.W+d.F*!F,{Promise:A}),n(/*! ./_set-to-string-tag */"./node_modules/core-js/modules/_set-to-string-tag.js")(A,"Promise"),n(/*! ./_set-species */"./node_modules/core-js/modules/_set-species.js")("Promise"),i=n(/*! ./_core */"./node_modules/core-js/modules/_core.js").Promise,d(d.S+d.F*!F,"Promise",{reject:function(e){var t=O(this);return(0,t.reject)(e),t.promise}}),d(d.S+d.F*(a||!F),"Promise",{resolve:function(e){return w(a&&this===i?A:this,e)}}),d(d.S+d.F*!(F&&n(/*! ./_iter-detect */"./node_modules/core-js/modules/_iter-detect.js")((function(e){A.all(e).catch(T)}))),"Promise",{all:function(e){var t=this,n=O(t),o=n.resolve,r=n.reject,s=g((function(){var n=[],s=0,i=1;v(e,!1,(function(e){var a=s++,u=!1;n.push(void 0),i++,t.resolve(e).then((function(e){u||(u=!0,n[a]=e,--i||o(n))}),r)})),--i||o(n)}));return s.e&&r(s.v),n.promise},race:function(e){var t=this,n=O(t),o=n.reject,r=g((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,o)}))}));return r.e&&o(r.v),n.promise}})},"./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){n(/*! ./_fix-re-wks */"./node_modules/core-js/modules/_fix-re-wks.js")("match",1,(function(e,t,n){return[function(n){"use strict";var o=e(this),r=null==n?void 0:n[t];return void 0!==r?r.call(n,o):new RegExp(n)[t](String(o))},n]}))},"./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){var o=n(/*! ./_export */"./node_modules/core-js/modules/_export.js"),r=n(/*! ./_object-to-array */"./node_modules/core-js/modules/_object-to-array.js")(!1);o(o.S,"Object",{values:function(e){return r(e)}})},"./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){for(var o=n(/*! ./es6.array.iterator */"./node_modules/core-js/modules/es6.array.iterator.js"),r=n(/*! ./_object-keys */"./node_modules/core-js/modules/_object-keys.js"),s=n(/*! ./_redefine */"./node_modules/core-js/modules/_redefine.js"),i=n(/*! ./_global */"./node_modules/core-js/modules/_global.js"),a=n(/*! ./_hide */"./node_modules/core-js/modules/_hide.js"),u=n(/*! ./_iterators */"./node_modules/core-js/modules/_iterators.js"),l=n(/*! ./_wks */"./node_modules/core-js/modules/_wks.js"),c=l("iterator"),d=l("toStringTag"),f=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},m=r(p),v=0;v<m.length;v++){var h,_=m[v],y=p[_],j=i[_],g=j&&j.prototype;if(g&&(g[c]||a(g,c,f),g[d]||a(g,d,_),u[_]=f,y))for(h in o)g[h]||s(g,h,o[h],!0)}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,o,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var u,l=[],c=!1,d=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):d=-1,l.length&&p())}function p(){if(!c){var e=a(f);c=!0;for(var t=l.length;t;){for(u=l,l=[];++d<t;)u&&u[d].run();d=-1,t=l.length}u=null,c=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new m(e,t)),1!==l.length||c||a(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},"./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var o,r,s,i,a,u=1,l={},c=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?o=function(e){t.nextTick((function(){m(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){m(e.data)},o=function(e){s.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(r=d.documentElement,o=function(e){var t=d.createElement("script");t.onreadystatechange=function(){m(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):o=function(e){setTimeout(m,0,e)}:(i="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(i)&&m(+t.data.slice(i.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),o=function(t){e.postMessage(i+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return l[u]=r,o(u),u++},f.clearImmediate=p}function p(e){delete l[e]}function m(e){if(c)setTimeout(m,0,e);else{var t=l[e];if(t){c=!0;try{!function(e){var t=e.callback,o=e.args;switch(o.length){case 0:t();break;case 1:t(o[0]);break;case 2:t(o[0],o[1]);break;case 3:t(o[0],o[1],o[2]);break;default:t.apply(n,o)}}(t)}finally{p(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){(function(e){var o=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(r.call(setTimeout,o,arguments),clearTimeout)},t.setInterval=function(){return new s(r.call(setInterval,o,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(o,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(/*! setimmediate */"./node_modules/setimmediate/setImmediate.js"),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug&":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/pug-plain-loader!./js/_modules/FormController/FormController.pug?vue&type=template&id=3997cf50&lang=pug& ***!
  \***********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */function(e,t,n){"use strict";n.r(t),n.d(t,"render",(function(){return o})),n.d(t,"staticRenderFns",(function(){return r}));var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("form",{staticClass:"c-Form js-FormController_Main",on:{submit:function(t){return t.preventDefault(),e.onSubmit(t)}}},[n("h2",{staticClass:"c-Form_Ttl"},[e._v("電気代一括見積りフォーム")]),e._m(0),n("p",{staticClass:"c-Form_RequiredSP"},[e._v("すべて入力必須")]),n("div",{staticClass:"c-Form_Body"},[n("Select",{attrs:{name:"provider",heading:'ご契約中の<br class="u-SP">電力会社',list:e.getProviderList,"error-message":"選択してください","child-list":"pref","current-value":e.sendValues.provider,"is-valid":e.validateStatus.provider.isValid},on:{"change-value":e.changeSendValue,"change-list":e.onChangeList}}),n("Select",{attrs:{name:"pref",heading:"都道府県",list:e.getPrefList,"error-message":"選択してください","child-list":null,"current-value":e.sendValues.pref,"is-valid":e.validateStatus.pref.isValid},on:{"change-value":e.changeSendValue}}),n("InputText",{attrs:{name:"company",type:"text",heading:"貴社名",placeholder:"○○株式会社","error-message":"正しく入力してください","current-value":e.sendValues.company,"is-valid":e.validateStatus.company.isValid},on:{"change-value":e.changeSendValue}}),n("InputText",{attrs:{name:"name",type:"text",heading:"ご担当者",placeholder:"ご入力ください","error-message":"正しく入力してください","current-value":e.sendValues.name,"is-valid":e.validateStatus.name.isValid},on:{"change-value":e.changeSendValue}}),n("InputText",{attrs:{name:"phone",type:"tel",heading:"電話番号",placeholder:"03-1234-5678","error-message":"正しく入力してください","current-value":e.sendValues.phone,"is-valid":e.validateStatus.phone.isValid},on:{"change-value":e.changeSendValue}}),n("InputText",{attrs:{name:"email",type:"text",heading:"メールアドレス",placeholder:"メールアドレス","error-message":"正しいメールアドレスの形式で入力してください","current-value":e.sendValues.email,"is-valid":e.validateStatus.email.isValid},on:{"change-value":e.changeSendValue}})],1),e._m(1),n("p",{staticClass:"c-Form_Notice"},[e._v("利用規約・個人情報に同意の上送信ください")])])},r=[function(){var e=this.$createElement,t=this._self._c||e;return t("p",{staticClass:"c-Form_Desc"},[this._v("全国15社以上の電力会社の見積りから"),t("br"),this._v("自社に合うものを選ぶだけ！")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"c-Form_BtnArea"},[t("button",{staticClass:"c-Form_Btn"},[this._v("一括見積もりしてみる")])])}];o._withStripped=!0},"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug&":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/pug-plain-loader!./js/_modules/FormController/components/InputText/InputText.pug?vue&type=template&id=310bc416&lang=pug& ***!
  \***************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */function(e,t,n){"use strict";n.r(t),n.d(t,"render",(function(){return o})),n.d(t,"staticRenderFns",(function(){return r}));var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"c-Form_RowGroup"},[e.isValid?e._e():n("div",{staticClass:"c-Form_Row t-Error"},[n("p",{staticClass:"c-Form_Row_ErrorMsg"},[e._v(e._s(e.errorMessage))])]),n("div",{staticClass:"c-Form_Row"},[n("p",{staticClass:"c-Form_NameCol t-Small"},[n("span",{staticClass:"c-Form_Required"},[e._v("必須")]),e._v(e._s(e.heading))]),n("div",{staticClass:"c-Form_InputCol"},["checkbox"===e.type?n("input",{directives:[{name:"model",rawName:"v-model",value:e.inputted,expression:"inputted"}],staticClass:"c-Form_Input",attrs:{name:e.name,placeholder:e.placeholder,type:"checkbox"},domProps:{checked:Array.isArray(e.inputted)?e._i(e.inputted,null)>-1:e.inputted},on:{change:function(t){var n=e.inputted,o=t.target,r=!!o.checked;if(Array.isArray(n)){var s=e._i(n,null);o.checked?s<0&&(e.inputted=n.concat([null])):s>-1&&(e.inputted=n.slice(0,s).concat(n.slice(s+1)))}else e.inputted=r}}}):"radio"===e.type?n("input",{directives:[{name:"model",rawName:"v-model",value:e.inputted,expression:"inputted"}],staticClass:"c-Form_Input",attrs:{name:e.name,placeholder:e.placeholder,type:"radio"},domProps:{checked:e._q(e.inputted,null)},on:{change:function(t){e.inputted=null}}}):n("input",{directives:[{name:"model",rawName:"v-model",value:e.inputted,expression:"inputted"}],staticClass:"c-Form_Input",attrs:{name:e.name,placeholder:e.placeholder,type:e.type},domProps:{value:e.inputted},on:{input:function(t){t.target.composing||(e.inputted=t.target.value)}}})])])])},r=[];o._withStripped=!0},"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug&":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/pug-plain-loader!./js/_modules/FormController/components/Select/Select.pug?vue&type=template&id=521c34e6&lang=pug& ***!
  \*********************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */function(e,t,n){"use strict";n.r(t),n.d(t,"render",(function(){return o})),n.d(t,"staticRenderFns",(function(){return r}));var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"c-Form_RowGroup"},[e.isValid?e._e():n("div",{staticClass:"c-Form_Row t-Error"},[n("p",{staticClass:"c-Form_Row_ErrorMsg"},[e._v(e._s(e.errorMessage))])]),n("div",{staticClass:"c-Form_Row"},[n("p",{staticClass:"c-Form_NameCol t-Small"},[n("span",{staticClass:"c-Form_Required"},[e._v("必須")]),n("span",{domProps:{innerHTML:e._s(e.heading)}})]),n("div",{staticClass:"c-Form_InputCol"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"c-Form_Select",attrs:{name:"name"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.selected=t.target.multiple?n:n[0]}}},e._l(e.list,(function(t){return n("option",{domProps:{value:t.value}},[e._v(e._s(t.name))])})),0),n("i",{staticClass:"c-Form_Arrow"})])])])},r=[];o._withStripped=!0},"./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function o(e,t,n,o,r,s,i,a){var u,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),o&&(l.functional=!0),s&&(l._scopeId="data-v-"+s),i?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},l._ssrRegister=u):r&&(u=a?function(){r.call(this,this.$root.$options.shadowRoot)}:r),u)if(l.functional){l._injectStyles=u;var c=l.render;l.render=function(e,t){return u.call(t),c(e,t)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:l}}n.r(t),n.d(t,"default",(function(){return o}))},"./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),function(e,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({});function r(e){return null==e}function s(e){return null!=e}function i(e){return!0===e}function a(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function u(e){return null!==e&&"object"==typeof e}var l=Object.prototype.toString;function c(e){return l.call(e).slice(8,-1)}function d(e){return"[object Object]"===l.call(e)}function f(e){return"[object RegExp]"===l.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function m(e){return s(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function v(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===l?JSON.stringify(e,null,2):String(e)}function h(e){var t=parseFloat(e);return isNaN(t)?e:t}function _(e,t){for(var n=Object.create(null),o=e.split(","),r=0;r<o.length;r++)n[o[r]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var y=_("slot,component",!0),j=_("key,ref,slot,slot-scope,is");function g(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function w(e,t){return b.call(e,t)}function x(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var C=/-(\w)/g,k=x((function(e){return e.replace(C,(function(e,t){return t?t.toUpperCase():""}))})),S=x((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),A=/\B([A-Z])/g,$=x((function(e){return e.replace(A,"-$1").toLowerCase()}));var T=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var o=arguments.length;return o?o>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function O(e,t){t=t||0;for(var n=e.length-t,o=new Array(n);n--;)o[n]=e[n+t];return o}function F(e,t){for(var n in t)e[n]=t[n];return e}function I(e){for(var t={},n=0;n<e.length;n++)e[n]&&F(t,e[n]);return t}function E(e,t,n){}var P=function(e,t,n){return!1},M=function(e){return e};function L(e,t){if(e===t)return!0;var n=u(e),o=u(t);if(!n||!o)return!n&&!o&&String(e)===String(t);try{var r=Array.isArray(e),s=Array.isArray(t);if(r&&s)return e.length===t.length&&e.every((function(e,n){return L(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(r||s)return!1;var i=Object.keys(e),a=Object.keys(t);return i.length===a.length&&i.every((function(n){return L(e[n],t[n])}))}catch(e){return!1}}function N(e,t){for(var n=0;n<e.length;n++)if(L(e[n],t))return n;return-1}function D(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var V="data-server-rendered",R=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:E,parsePlatformTagName:M,mustUseProp:P,async:!0,_lifecycleHooks:B},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function W(e,t,n,o){Object.defineProperty(e,t,{value:n,enumerable:!!o,writable:!0,configurable:!0})}var q=new RegExp("[^"+H.source+".$_\\d]");var G,K="__proto__"in{},X="undefined"!=typeof window,Z="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Y=Z&&WXEnvironment.platform.toLowerCase(),J=X&&window.navigator.userAgent.toLowerCase(),Q=J&&/msie|trident/.test(J),ee=J&&J.indexOf("msie 9.0")>0,te=J&&J.indexOf("edge/")>0,ne=(J&&J.indexOf("android"),J&&/iphone|ipad|ipod|ios/.test(J)||"ios"===Y),oe=(J&&/chrome\/\d+/.test(J),J&&/phantomjs/.test(J),J&&J.match(/firefox\/(\d+)/)),re={}.watch,se=!1;if(X)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){se=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===G&&(G=!X&&!Z&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),G},ue=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function le(e){return"function"==typeof e&&/native code/.test(e.toString())}var ce,de="undefined"!=typeof Symbol&&le(Symbol)&&"undefined"!=typeof Reflect&&le(Reflect.ownKeys);ce="undefined"!=typeof Set&&le(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var fe=E,pe=E,me=E,ve=E,he="undefined"!=typeof console,_e=/(?:^|[-_])(\w)/g;fe=function(e,t){var n=t?me(t):"";U.warnHandler?U.warnHandler.call(null,e,t,n):he&&!U.silent&&console.error("[Vue warn]: "+e+n)},pe=function(e,t){he&&!U.silent&&console.warn("[Vue tip]: "+e+(t?me(t):""))},ve=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,o=n.name||n._componentTag,r=n.__file;if(!o&&r){var s=r.match(/([^/\\]+)\.vue$/);o=s&&s[1]}return(o?"<"+o.replace(_e,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")+">":"<Anonymous>")+(r&&!1!==t?" at "+r:"")};me=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var o=t[t.length-1];if(o.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[o,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?ve(e[0])+"... ("+e[1]+" recursive calls)":ve(e))})).join("\n")}return"\n\n(found in "+ve(e)+")"};var ye=0,je=function(){this.id=ye++,this.subs=[]};je.prototype.addSub=function(e){this.subs.push(e)},je.prototype.removeSub=function(e){g(this.subs,e)},je.prototype.depend=function(){je.target&&je.target.addDep(this)},je.prototype.notify=function(){var e=this.subs.slice();U.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},je.target=null;var ge=[];function be(e){ge.push(e),je.target=e}function we(){ge.pop(),je.target=ge[ge.length-1]}var xe=function(e,t,n,o,r,s,i,a){this.tag=e,this.data=t,this.children=n,this.text=o,this.elm=r,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=a,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ce={child:{configurable:!0}};Ce.child.get=function(){return this.componentInstance},Object.defineProperties(xe.prototype,Ce);var ke=function(e){void 0===e&&(e="");var t=new xe;return t.text=e,t.isComment=!0,t};function Se(e){return new xe(void 0,void 0,void 0,String(e))}function Ae(e){var t=new xe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var $e=Array.prototype,Te=Object.create($e);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=$e[e];W(Te,e,(function(){for(var n=[],o=arguments.length;o--;)n[o]=arguments[o];var r,s=t.apply(this,n),i=this.__ob__;switch(e){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&i.observeArray(r),i.dep.notify(),s}))}));var Oe=Object.getOwnPropertyNames(Te),Fe=!0;function Ie(e){Fe=e}var Ee=function(e){this.value=e,this.dep=new je,this.vmCount=0,W(e,"__ob__",this),Array.isArray(e)?(K?function(e,t){e.__proto__=t}(e,Te):function(e,t,n){for(var o=0,r=n.length;o<r;o++){var s=n[o];W(e,s,t[s])}}(e,Te,Oe),this.observeArray(e)):this.walk(e)};function Pe(e,t){var n;if(u(e)&&!(e instanceof xe))return w(e,"__ob__")&&e.__ob__ instanceof Ee?n=e.__ob__:Fe&&!ae()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ee(e)),t&&n&&n.vmCount++,n}function Me(e,t,n,o,r){var s=new je,i=Object.getOwnPropertyDescriptor(e,t);if(!i||!1!==i.configurable){var a=i&&i.get,u=i&&i.set;a&&!u||2!==arguments.length||(n=e[t]);var l=!r&&Pe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return je.target&&(s.depend(),l&&(l.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,o=0,r=t.length;o<r;o++)(n=t[o])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var i=a?a.call(e):n;t===i||t!=t&&i!=i||(o&&o(),a&&!u||(u?u.call(e,t):n=t,l=!r&&Pe(t),s.notify()))}})}}function Le(e,t,n){if((r(e)||a(e))&&fe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var o=e.__ob__;return e._isVue||o&&o.vmCount?(fe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(Me(o.value,t,n),o.dep.notify(),n):(e[t]=n,n)}function Ne(e,t){if((r(e)||a(e))&&fe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?fe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,t)&&(delete e[t],n&&n.dep.notify())}}Ee.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Me(e,t[n])},Ee.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Pe(e[t])};var De=U.optionMergeStrategies;function Ve(e,t){if(!t)return e;for(var n,o,r,s=de?Reflect.ownKeys(t):Object.keys(t),i=0;i<s.length;i++)"__ob__"!==(n=s[i])&&(o=e[n],r=t[n],w(e,n)?o!==r&&d(o)&&d(r)&&Ve(o,r):Le(e,n,r));return e}function Re(e,t,n){return n?function(){var o="function"==typeof t?t.call(n,n):t,r="function"==typeof e?e.call(n,n):e;return o?Ve(o,r):r}:t?e?function(){return Ve("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Be(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Ue(e,t,n,o){var r=Object.create(e||null);return t?(We(o,t,n),F(r,t)):r}De.el=De.propsData=function(e,t,n,o){return n||fe('option "'+o+'" can only be used during instance creation with the `new` keyword.'),He(e,t)},De.data=function(e,t,n){return n?Re(e,t,n):t&&"function"!=typeof t?(fe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Re(e,t)},B.forEach((function(e){De[e]=Be})),R.forEach((function(e){De[e+"s"]=Ue})),De.watch=function(e,t,n,o){if(e===re&&(e=void 0),t===re&&(t=void 0),!t)return Object.create(e||null);if(We(o,t,n),!e)return t;var r={};for(var s in F(r,e),t){var i=r[s],a=t[s];i&&!Array.isArray(i)&&(i=[i]),r[s]=i?i.concat(a):Array.isArray(a)?a:[a]}return r},De.props=De.methods=De.inject=De.computed=function(e,t,n,o){if(t&&We(o,t,n),!e)return t;var r=Object.create(null);return F(r,e),t&&F(r,t),r},De.provide=Re;var He=function(e,t){return void 0===t?e:t};function ze(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+H.source+"]*$").test(e)||fe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(y(e)||U.isReservedTag(e))&&fe("Do not use built-in or reserved HTML elements as component id: "+e)}function We(e,t,n){d(t)||fe('Invalid value for option "'+e+'": expected an Object, but got '+c(t)+".",n)}function qe(e,t,n){if(function(e){for(var t in e.components)ze(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var o,r,s={};if(Array.isArray(n))for(o=n.length;o--;)"string"==typeof(r=n[o])?s[k(r)]={type:null}:fe("props must be strings when using array syntax.");else if(d(n))for(var i in n)r=n[i],s[k(i)]=d(r)?r:{type:r};else fe('Invalid value for option "props": expected an Array or an Object, but got '+c(n)+".",t);e.props=s}}(t,n),function(e,t){var n=e.inject;if(n){var o=e.inject={};if(Array.isArray(n))for(var r=0;r<n.length;r++)o[n[r]]={from:n[r]};else if(d(n))for(var s in n){var i=n[s];o[s]=d(i)?F({from:s},i):{from:i}}else fe('Invalid value for option "inject": expected an Array or an Object, but got '+c(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var o=t[n];"function"==typeof o&&(t[n]={bind:o,update:o})}}(t),!t._base&&(t.extends&&(e=qe(e,t.extends,n)),t.mixins))for(var o=0,r=t.mixins.length;o<r;o++)e=qe(e,t.mixins[o],n);var s,i={};for(s in e)a(s);for(s in t)w(e,s)||a(s);function a(o){var r=De[o]||He;i[o]=r(e[o],t[o],n,o)}return i}function Ge(e,t,n,o){if("string"==typeof n){var r=e[t];if(w(r,n))return r[n];var s=k(n);if(w(r,s))return r[s];var i=S(s);if(w(r,i))return r[i];var a=r[n]||r[s]||r[i];return o&&!a&&fe("Failed to resolve "+t.slice(0,-1)+": "+n,e),a}}function Ke(e,t,n,o){var r=t[e],s=!w(n,e),i=n[e],a=Qe(Boolean,r.type);if(a>-1)if(s&&!w(r,"default"))i=!1;else if(""===i||i===$(e)){var l=Qe(String,r.type);(l<0||a<l)&&(i=!0)}if(void 0===i){i=function(e,t,n){if(!w(t,"default"))return;var o=t.default;u(o)&&fe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e);if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof o&&"Function"!==Ye(t.type)?o.call(e):o}(o,r,e);var d=Fe;Ie(!0),Pe(i),Ie(d)}return function(e,t,n,o,r){if(e.required&&r)return void fe('Missing required prop: "'+t+'"',o);if(null==n&&!e.required)return;var s=e.type,i=!s||!0===s,a=[];if(s){Array.isArray(s)||(s=[s]);for(var u=0;u<s.length&&!i;u++){var l=Ze(n,s[u]);a.push(l.expectedType||""),i=l.valid}}if(!i)return void fe(function(e,t,n){var o='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(S).join(", "),r=n[0],s=c(t),i=et(t,r),a=et(t,s);1===n.length&&tt(r)&&!function(){var e=[],t=arguments.length;for(;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(r,s)&&(o+=" with value "+i);o+=", got "+s+" ",tt(s)&&(o+="with value "+a+".");return o}(t,n,a),o);var d=e.validator;d&&(d(n)||fe('Invalid prop: custom validator check failed for prop "'+t+'".',o))}(r,e,i,o,s),i}var Xe=/^(String|Number|Boolean|Function|Symbol)$/;function Ze(e,t){var n,o=Ye(t);if(Xe.test(o)){var r=typeof e;(n=r===o.toLowerCase())||"object"!==r||(n=e instanceof t)}else n="Object"===o?d(e):"Array"===o?Array.isArray(e):e instanceof t;return{valid:n,expectedType:o}}function Ye(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Je(e,t){return Ye(e)===Ye(t)}function Qe(e,t){if(!Array.isArray(t))return Je(t,e)?0:-1;for(var n=0,o=t.length;n<o;n++)if(Je(t[n],e))return n;return-1}function et(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function tt(e){return["string","number","boolean"].some((function(t){return e.toLowerCase()===t}))}function nt(e,t,n){be();try{if(t)for(var o=t;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var s=0;s<r.length;s++)try{if(!1===r[s].call(o,e,t,n))return}catch(e){rt(e,o,"errorCaptured hook")}}rt(e,t,n)}finally{we()}}function ot(e,t,n,o,r){var s;try{(s=n?e.apply(t,n):e.call(t))&&!s._isVue&&m(s)&&!s._handled&&(s.catch((function(e){return nt(e,o,r+" (Promise/async)")})),s._handled=!0)}catch(e){nt(e,o,r)}return s}function rt(e,t,n){if(U.errorHandler)try{return U.errorHandler.call(null,e,t,n)}catch(t){t!==e&&st(t,null,"config.errorHandler")}st(e,t,n)}function st(e,t,n){if(fe("Error in "+n+': "'+e.toString()+'"',t),!X&&!Z||"undefined"==typeof console)throw e;console.error(e)}var it,at,ut=!1,lt=[],ct=!1;function dt(){ct=!1;var e=lt.slice(0);lt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&le(Promise)){var ft=Promise.resolve();it=function(){ft.then(dt),ne&&setTimeout(E)},ut=!0}else if(Q||"undefined"==typeof MutationObserver||!le(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())it=void 0!==n&&le(n)?function(){n(dt)}:function(){setTimeout(dt,0)};else{var pt=1,mt=new MutationObserver(dt),vt=document.createTextNode(String(pt));mt.observe(vt,{characterData:!0}),it=function(){pt=(pt+1)%2,vt.data=String(pt)},ut=!0}function ht(e,t){var n;if(lt.push((function(){if(e)try{e.call(t)}catch(e){nt(e,t,"nextTick")}else n&&n(t)})),ct||(ct=!0,it()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var _t=_("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),yt=function(e,t){fe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},jt=function(e,t){fe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',e)},gt="undefined"!=typeof Proxy&&le(Proxy);if(gt){var bt=_("stop,prevent,self,ctrl,shift,alt,meta,exact");U.keyCodes=new Proxy(U.keyCodes,{set:function(e,t,n){return bt(t)?(fe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var wt={has:function(e,t){var n=t in e,o=_t(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||o||(t in e.$data?jt(e,t):yt(e,t)),n||!o}},xt={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?jt(e,t):yt(e,t)),e[t]}};at=function(e){if(gt){var t=e.$options,n=t.render&&t.render._withStripped?xt:wt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Ct,kt,St=new ce;function At(e){!function e(t,n){var o,r;var s=Array.isArray(t);if(!s&&!u(t)||Object.isFrozen(t)||t instanceof xe)return;if(t.__ob__){var i=t.__ob__.dep.id;if(n.has(i))return;n.add(i)}if(s)for(o=t.length;o--;)e(t[o],n);else for(r=Object.keys(t),o=r.length;o--;)e(t[r[o]],n)}(e,St),St.clear()}var $t=X&&window.performance;$t&&$t.mark&&$t.measure&&$t.clearMarks&&$t.clearMeasures&&(Ct=function(e){return $t.mark(e)},kt=function(e,t,n){$t.measure(e,t,n),$t.clearMarks(t),$t.clearMarks(n)});var Tt=x((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),o="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:n,capture:o,passive:t}}));function Ot(e,t){function n(){var e=arguments,o=n.fns;if(!Array.isArray(o))return ot(o,null,arguments,t,"v-on handler");for(var r=o.slice(),s=0;s<r.length;s++)ot(r[s],null,e,t,"v-on handler")}return n.fns=e,n}function Ft(e,t,n,o,s,a){var u,l,c,d;for(u in e)l=e[u],c=t[u],d=Tt(u),r(l)?fe('Invalid handler for event "'+d.name+'": got '+String(l),a):r(c)?(r(l.fns)&&(l=e[u]=Ot(l,a)),i(d.once)&&(l=e[u]=s(d.name,l,d.capture)),n(d.name,l,d.capture,d.passive,d.params)):l!==c&&(c.fns=l,e[u]=c);for(u in t)r(e[u])&&o((d=Tt(u)).name,t[u],d.capture)}function It(e,t,n){var o;e instanceof xe&&(e=e.data.hook||(e.data.hook={}));var a=e[t];function u(){n.apply(this,arguments),g(o.fns,u)}r(a)?o=Ot([u]):s(a.fns)&&i(a.merged)?(o=a).fns.push(u):o=Ot([a,u]),o.merged=!0,e[t]=o}function Et(e,t,n,o,r){if(s(t)){if(w(t,n))return e[n]=t[n],r||delete t[n],!0;if(w(t,o))return e[n]=t[o],r||delete t[o],!0}return!1}function Pt(e){return a(e)?[Se(e)]:Array.isArray(e)?function e(t,n){var o=[];var u,l,c,d;for(u=0;u<t.length;u++)r(l=t[u])||"boolean"==typeof l||(c=o.length-1,d=o[c],Array.isArray(l)?l.length>0&&(Mt((l=e(l,(n||"")+"_"+u))[0])&&Mt(d)&&(o[c]=Se(d.text+l[0].text),l.shift()),o.push.apply(o,l)):a(l)?Mt(d)?o[c]=Se(d.text+l):""!==l&&o.push(Se(l)):Mt(l)&&Mt(d)?o[c]=Se(d.text+l.text):(i(t._isVList)&&s(l.tag)&&r(l.key)&&s(n)&&(l.key="__vlist"+n+"_"+u+"__"),o.push(l)));return o}(e):void 0}function Mt(e){return s(e)&&s(e.text)&&!1===e.isComment}function Lt(e,t){if(e){for(var n=Object.create(null),o=de?Reflect.ownKeys(e):Object.keys(e),r=0;r<o.length;r++){var s=o[r];if("__ob__"!==s){for(var i=e[s].from,a=t;a;){if(a._provided&&w(a._provided,i)){n[s]=a._provided[i];break}a=a.$parent}if(!a)if("default"in e[s]){var u=e[s].default;n[s]="function"==typeof u?u.call(t):u}else fe('Injection "'+s+'" not found',t)}}return n}}function Nt(e,t){if(!e||!e.length)return{};for(var n={},o=0,r=e.length;o<r;o++){var s=e[o],i=s.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,s.context!==t&&s.fnContext!==t||!i||null==i.slot)(n.default||(n.default=[])).push(s);else{var a=i.slot,u=n[a]||(n[a]=[]);"template"===s.tag?u.push.apply(u,s.children||[]):u.push(s)}}for(var l in n)n[l].every(Dt)&&delete n[l];return n}function Dt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Vt(e,t,n){var r,s=Object.keys(t).length>0,i=e?!!e.$stable:!s,a=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&n&&n!==o&&a===n.$key&&!s&&!n.$hasNormal)return n;for(var u in r={},e)e[u]&&"$"!==u[0]&&(r[u]=Rt(t,u,e[u]))}else r={};for(var l in t)l in r||(r[l]=Bt(t,l));return e&&Object.isExtensible(e)&&(e._normalized=r),W(r,"$stable",i),W(r,"$key",a),W(r,"$hasNormal",s),r}function Rt(e,t,n){var o=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:Pt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function Bt(e,t){return function(){return e[t]}}function Ut(e,t){var n,o,r,i,a;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),o=0,r=e.length;o<r;o++)n[o]=t(e[o],o);else if("number"==typeof e)for(n=new Array(e),o=0;o<e;o++)n[o]=t(o+1,o);else if(u(e))if(de&&e[Symbol.iterator]){n=[];for(var l=e[Symbol.iterator](),c=l.next();!c.done;)n.push(t(c.value,n.length)),c=l.next()}else for(i=Object.keys(e),n=new Array(i.length),o=0,r=i.length;o<r;o++)a=i[o],n[o]=t(e[a],a,o);return s(n)||(n=[]),n._isVList=!0,n}function Ht(e,t,n,o){var r,s=this.$scopedSlots[e];s?(n=n||{},o&&(u(o)||fe("slot v-bind without argument expects an Object",this),n=F(F({},o),n)),r=s(n)||t):r=this.$slots[e]||t;var i=n&&n.slot;return i?this.$createElement("template",{slot:i},r):r}function zt(e){return Ge(this.$options,"filters",e,!0)||M}function Wt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function qt(e,t,n,o,r){var s=U.keyCodes[t]||n;return r&&o&&!U.keyCodes[t]?Wt(r,o):s?Wt(s,e):o?$(o)!==t:void 0}function Gt(e,t,n,o,r){if(n)if(u(n)){var s;Array.isArray(n)&&(n=I(n));var i=function(i){if("class"===i||"style"===i||j(i))s=e;else{var a=e.attrs&&e.attrs.type;s=o||U.mustUseProp(t,a,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=k(i),l=$(i);u in s||l in s||(s[i]=n[i],r&&((e.on||(e.on={}))["update:"+i]=function(e){n[i]=e}))};for(var a in n)i(a)}else fe("v-bind without argument expects an Object or Array value",this);return e}function Kt(e,t){var n=this._staticTrees||(this._staticTrees=[]),o=n[e];return o&&!t?o:(Zt(o=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),o)}function Xt(e,t,n){return Zt(e,"__once__"+t+(n?"_"+n:""),!0),e}function Zt(e,t,n){if(Array.isArray(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&Yt(e[o],t+"_"+o,n);else Yt(e,t,n)}function Yt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Jt(e,t){if(t)if(d(t)){var n=e.on=e.on?F({},e.on):{};for(var o in t){var r=n[o],s=t[o];n[o]=r?[].concat(r,s):s}}else fe("v-on without argument expects an Object value",this);return e}function Qt(e,t,n,o){t=t||{$stable:!n};for(var r=0;r<e.length;r++){var s=e[r];Array.isArray(s)?Qt(s,t,n):s&&(s.proxy&&(s.fn.proxy=!0),t[s.key]=s.fn)}return o&&(t.$key=o),t}function en(e,t){for(var n=0;n<t.length;n+=2){var o=t[n];"string"==typeof o&&o?e[t[n]]=t[n+1]:""!==o&&null!==o&&fe("Invalid value for dynamic directive argument (expected string or null): "+o,this)}return e}function tn(e,t){return"string"==typeof e?t+e:e}function nn(e){e._o=Xt,e._n=h,e._s=v,e._l=Ut,e._t=Ht,e._q=L,e._i=N,e._m=Kt,e._f=zt,e._k=qt,e._b=Gt,e._v=Se,e._e=ke,e._u=Qt,e._g=Jt,e._d=en,e._p=tn}function on(e,t,n,r,s){var a,u=this,l=s.options;w(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var c=i(l._compiled),d=!c;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||o,this.injections=Lt(l.inject,r),this.slots=function(){return u.$slots||Vt(e.scopedSlots,u.$slots=Nt(n,r)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Vt(e.scopedSlots,this.slots())}}),c&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=Vt(e.scopedSlots,this.$slots)),l._scopeId?this._c=function(e,t,n,o){var s=pn(a,e,t,n,o,d);return s&&!Array.isArray(s)&&(s.fnScopeId=l._scopeId,s.fnContext=r),s}:this._c=function(e,t,n,o){return pn(a,e,t,n,o,d)}}function rn(e,t,n,o,r){var s=Ae(e);return s.fnContext=n,s.fnOptions=o,(s.devtoolsMeta=s.devtoolsMeta||{}).renderContext=r,t.slot&&((s.data||(s.data={})).slot=t.slot),s}function sn(e,t){for(var n in t)e[k(n)]=t[n]}nn(on.prototype);var an={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;an.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},o=e.data.inlineTemplate;s(o)&&(n.render=o.render,n.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,xn)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,s){Cn=!0;var i=r.data.scopedSlots,a=e.$scopedSlots,u=!!(i&&!i.$stable||a!==o&&!a.$stable||i&&e.$scopedSlots.$key!==i.$key),l=!!(s||e.$options._renderChildren||u);e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r);if(e.$options._renderChildren=s,e.$attrs=r.data.attrs||o,e.$listeners=n||o,t&&e.$options.props){Ie(!1);for(var c=e._props,d=e.$options._propKeys||[],f=0;f<d.length;f++){var p=d[f],m=e.$options.props;c[p]=Ke(p,m,t,e)}Ie(!0),e.$options.propsData=t}n=n||o;var v=e.$options._parentListeners;e.$options._parentListeners=n,wn(e,n,v),l&&(e.$slots=Nt(s,r.context),e.$forceUpdate());Cn=!1}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,$n(o,"mounted")),e.data.keepAlive&&(n._isMounted?((t=o)._inactive=!1,Fn.push(t)):An(o,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Sn(t)))return;if(!t._inactive){t._inactive=!0;for(var o=0;o<t.$children.length;o++)e(t.$children[o]);$n(t,"deactivated")}}(t,!0):t.$destroy())}},un=Object.keys(an);function ln(e,t,n,a,l){if(!r(e)){var c=n.$options._base;if(u(e)&&(e=c.extend(e)),"function"==typeof e){var d;if(r(e.cid)&&void 0===(e=function(e,t){if(i(e.error)&&s(e.errorComp))return e.errorComp;if(s(e.resolved))return e.resolved;var n=vn;n&&s(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(i(e.loading)&&s(e.loadingComp))return e.loadingComp;if(n&&!s(e.owners)){var o=e.owners=[n],a=!0,l=null,c=null;n.$on("hook:destroyed",(function(){return g(o,n)}));var d=function(e){for(var t=0,n=o.length;t<n;t++)o[t].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},f=D((function(n){e.resolved=hn(n,t),a?o.length=0:d(!0)})),p=D((function(t){fe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),s(e.errorComp)&&(e.error=!0,d(!0))})),v=e(f,p);return u(v)&&(m(v)?r(e.resolved)&&v.then(f,p):m(v.component)&&(v.component.then(f,p),s(v.error)&&(e.errorComp=hn(v.error,t)),s(v.loading)&&(e.loadingComp=hn(v.loading,t),0===v.delay?e.loading=!0:l=setTimeout((function(){l=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,d(!1))}),v.delay||200)),s(v.timeout)&&(c=setTimeout((function(){c=null,r(e.resolved)&&p("timeout ("+v.timeout+"ms)")}),v.timeout)))),a=!1,e.loading?e.loadingComp:e.resolved}}(d=e,c)))return function(e,t,n,o,r){var s=ke();return s.asyncFactory=e,s.asyncMeta={data:t,context:n,children:o,tag:r},s}(d,t,n,a,l);t=t||{},Jn(e),s(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var r=t.on||(t.on={}),i=r[o],a=t.model.callback;s(i)?(Array.isArray(i)?-1===i.indexOf(a):i!==a)&&(r[o]=[a].concat(i)):r[o]=a}(e.options,t);var f=function(e,t,n){var o=t.options.props;if(!r(o)){var i={},a=e.attrs,u=e.props;if(s(a)||s(u))for(var l in o){var c=$(l),d=l.toLowerCase();l!==d&&a&&w(a,d)&&pe('Prop "'+d+'" is passed to component '+ve(n||t)+', but the declared prop name is "'+l+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+c+'" instead of "'+l+'".'),Et(i,u,l,c,!0)||Et(i,a,l,c,!1)}return i}}(t,e,l);if(i(e.options.functional))return function(e,t,n,r,i){var a=e.options,u={},l=a.props;if(s(l))for(var c in l)u[c]=Ke(c,l,t||o);else s(n.attrs)&&sn(u,n.attrs),s(n.props)&&sn(u,n.props);var d=new on(n,u,i,r,e),f=a.render.call(null,d._c,d);if(f instanceof xe)return rn(f,n,d.parent,a,d);if(Array.isArray(f)){for(var p=Pt(f)||[],m=new Array(p.length),v=0;v<p.length;v++)m[v]=rn(p[v],n,d.parent,a,d);return m}}(e,f,t,n,a);var p=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var v=t.slot;t={},v&&(t.slot=v)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<un.length;n++){var o=un[n],r=t[o],s=an[o];r===s||r&&r._merged||(t[o]=r?cn(s,r):s)}}(t);var h=e.options.name||l;return new xe("vue-component-"+e.cid+(h?"-"+h:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:f,listeners:p,tag:l,children:a},d)}fe("Invalid Component definition: "+String(e),n)}}function cn(e,t){var n=function(n,o){e(n,o),t(n,o)};return n._merged=!0,n}var dn=1,fn=2;function pn(e,t,n,o,l,c){return(Array.isArray(n)||a(n))&&(l=o,o=n,n=void 0),i(c)&&(l=fn),function(e,t,n,o,l){if(s(n)&&s(n.__ob__))return fe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ke();s(n)&&s(n.is)&&(t=n.is);if(!t)return ke();s(n)&&s(n.key)&&!a(n.key)&&fe("Avoid using non-primitive value as key, use string/number value instead.",e);Array.isArray(o)&&"function"==typeof o[0]&&((n=n||{}).scopedSlots={default:o[0]},o.length=0);l===fn?o=Pt(o):l===dn&&(o=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(o));var c,d;if("string"==typeof t){var f;d=e.$vnode&&e.$vnode.ns||U.getTagNamespace(t),c=U.isReservedTag(t)?new xe(U.parsePlatformTagName(t),n,o,void 0,void 0,e):n&&n.pre||!s(f=Ge(e.$options,"components",t))?new xe(t,n,o,void 0,void 0,e):ln(f,n,e,o,t)}else c=ln(t,n,e,o);return Array.isArray(c)?c:s(c)?(s(d)&&function e(t,n,o){t.ns=n;"foreignObject"===t.tag&&(n=void 0,o=!0);if(s(t.children))for(var a=0,u=t.children.length;a<u;a++){var l=t.children[a];s(l.tag)&&(r(l.ns)||i(o)&&"svg"!==l.tag)&&e(l,n,o)}}(c,d),s(n)&&function(e){u(e.style)&&At(e.style);u(e.class)&&At(e.class)}(n),c):ke()}(e,t,n,o,l)}var mn,vn=null;function hn(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?t.extend(e):e}function _n(e){return e.isComment&&e.asyncFactory}function yn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(s(n)&&(s(n.componentOptions)||_n(n)))return n}}function jn(e,t){mn.$on(e,t)}function gn(e,t){mn.$off(e,t)}function bn(e,t){var n=mn;return function o(){var r=t.apply(null,arguments);null!==r&&n.$off(e,o)}}function wn(e,t,n){mn=e,Ft(t,n||{},jn,gn,bn,e),mn=void 0}var xn=null,Cn=!1;function kn(e){var t=xn;return xn=e,function(){xn=t}}function Sn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function An(e,t){if(t){if(e._directInactive=!1,Sn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)An(e.$children[n]);$n(e,"activated")}}function $n(e,t){be();var n=e.$options[t],o=t+" hook";if(n)for(var r=0,s=n.length;r<s;r++)ot(n[r],e,null,e,o);e._hasHookEvent&&e.$emit("hook:"+t),we()}var Tn=100,On=[],Fn=[],In={},En={},Pn=!1,Mn=!1,Ln=0;var Nn=0,Dn=Date.now;if(X&&!Q){var Vn=window.performance;Vn&&"function"==typeof Vn.now&&Dn()>document.createEvent("Event").timeStamp&&(Dn=function(){return Vn.now()})}function Rn(){var e,t;for(Nn=Dn(),Mn=!0,On.sort((function(e,t){return e.id-t.id})),Ln=0;Ln<On.length;Ln++)if((e=On[Ln]).before&&e.before(),t=e.id,In[t]=null,e.run(),null!=In[t]&&(En[t]=(En[t]||0)+1,En[t]>Tn)){fe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Fn.slice(),o=On.slice();Ln=On.length=Fn.length=0,In={},En={},Pn=Mn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,An(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],o=n.vm;o._watcher===n&&o._isMounted&&!o._isDestroyed&&$n(o,"updated")}}(o),ue&&U.devtools&&ue.emit("flush")}var Bn=0,Un=function(e,t,n,o,r){this.vm=e,r&&(e._watcher=this),e._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Bn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ce,this.newDepIds=new ce,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!q.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=E,fe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Un.prototype.get=function(){var e;be(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;nt(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&At(e),we(),this.cleanupDeps()}return e},Un.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Un.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Un.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==In[t]){if(In[t]=!0,Mn){for(var n=On.length-1;n>Ln&&On[n].id>e.id;)n--;On.splice(n+1,0,e)}else On.push(e);if(!Pn){if(Pn=!0,!U.async)return void Rn();ht(Rn)}}}(this)},Un.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){nt(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Un.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Un.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Un.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Hn={enumerable:!0,configurable:!0,get:E,set:E};function zn(e,t,n){Hn.get=function(){return this[t][n]},Hn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Hn)}function Wn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},o=e._props={},r=e.$options._propKeys=[],s=!e.$parent;s||Ie(!1);var i=function(i){r.push(i);var a=Ke(i,t,n,e),u=$(i);(j(u)||U.isReservedAttr(u))&&fe('"'+u+'" is a reserved attribute and cannot be used as component prop.',e),Me(o,i,a,(function(){s||Cn||fe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)})),i in e||zn(e,"_props",i)};for(var a in t)i(a);Ie(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var o in t)"function"!=typeof t[o]&&fe('Method "'+o+'" has type "'+typeof t[o]+'" in the component definition. Did you reference the function correctly?',e),n&&w(n,o)&&fe('Method "'+o+'" has already been defined as a prop.',e),o in e&&z(o)&&fe('Method "'+o+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[o]="function"!=typeof t[o]?E:T(t[o],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;d(t=e._data="function"==typeof t?function(e,t){be();try{return e.call(t,t)}catch(e){return nt(e,t,"data()"),{}}finally{we()}}(t,e):t||{})||(t={},fe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),o=e.$options.props,r=e.$options.methods,s=n.length;for(;s--;){var i=n[s];r&&w(r,i)&&fe('Method "'+i+'" has already been defined as a data property.',e),o&&w(o,i)?fe('The data property "'+i+'" is already declared as a prop. Use prop default value instead.',e):z(i)||zn(e,"_data",i)}Pe(t,!0)}(e):Pe(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),o=ae();for(var r in t){var s=t[r],i="function"==typeof s?s:s.get;null==i&&fe('Getter is missing for computed property "'+r+'".',e),o||(n[r]=new Un(e,i||E,E,qn)),r in e?r in e.$data?fe('The computed property "'+r+'" is already defined in data.',e):e.$options.props&&r in e.$options.props&&fe('The computed property "'+r+'" is already defined as a prop.',e):Gn(e,r,s)}}(e,t.computed),t.watch&&t.watch!==re&&function(e,t){for(var n in t){var o=t[n];if(Array.isArray(o))for(var r=0;r<o.length;r++)Zn(e,n,o[r]);else Zn(e,n,o)}}(e,t.watch)}var qn={lazy:!0};function Gn(e,t,n){var o=!ae();"function"==typeof n?(Hn.get=o?Kn(t):Xn(n),Hn.set=E):(Hn.get=n.get?o&&!1!==n.cache?Kn(t):Xn(n.get):E,Hn.set=n.set||E),Hn.set===E&&(Hn.set=function(){fe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Hn)}function Kn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),je.target&&t.depend(),t.value}}function Xn(e){return function(){return e.call(this,this)}}function Zn(e,t,n,o){return d(n)&&(o=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,o)}var Yn=0;function Jn(e){var t=e.options;if(e.super){var n=Jn(e.super);if(n!==e.superOptions){e.superOptions=n;var o=function(e){var t,n=e.options,o=e.sealedOptions;for(var r in n)n[r]!==o[r]&&(t||(t={}),t[r]=n[r]);return t}(e);o&&F(e.extendOptions,o),(t=e.options=qe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Qn(e){this instanceof Qn||fe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function eo(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,o=n.cid,r=e._Ctor||(e._Ctor={});if(r[o])return r[o];var s=e.name||n.options.name;s&&ze(s);var i=function(e){this._init(e)};return(i.prototype=Object.create(n.prototype)).constructor=i,i.cid=t++,i.options=qe(n.options,e),i.super=n,i.options.props&&function(e){var t=e.options.props;for(var n in t)zn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)Gn(e.prototype,n,t[n])}(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,R.forEach((function(e){i[e]=n[e]})),s&&(i.options.components[s]=i),i.superOptions=n.options,i.extendOptions=e,i.sealedOptions=F({},i.options),r[o]=i,i}}function to(e){return e&&(e.Ctor.options.name||e.tag)}function no(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!f(e)&&e.test(t)}function oo(e,t){var n=e.cache,o=e.keys,r=e._vnode;for(var s in n){var i=n[s];if(i){var a=to(i.componentOptions);a&&!t(a)&&ro(n,s,o,r)}}}function ro(e,t,n,o){var r=e[t];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),e[t]=null,g(n,t)}!function(e){e.prototype._init=function(e){var t,n,r=this;r._uid=Yn++,U.performance&&Ct&&(t="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Ct(t)),r._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),o=t._parentVnode;n.parent=t.parent,n._parentVnode=o;var r=o.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(r,e):r.$options=qe(Jn(r.constructor),e||{},r),at(r),r._self=r,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(r),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&wn(e,t)}(r),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=Nt(t._renderChildren,r),e.$scopedSlots=o,e._c=function(t,n,o,r){return pn(e,t,n,o,r,!1)},e.$createElement=function(t,n,o,r){return pn(e,t,n,o,r,!0)};var s=n&&n.data;Me(e,"$attrs",s&&s.attrs||o,(function(){!Cn&&fe("$attrs is readonly.",e)}),!0),Me(e,"$listeners",t._parentListeners||o,(function(){!Cn&&fe("$listeners is readonly.",e)}),!0)}(r),$n(r,"beforeCreate"),function(e){var t=Lt(e.$options.inject,e);t&&(Ie(!1),Object.keys(t).forEach((function(n){Me(e,n,t[n],(function(){fe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),Ie(!0))}(r),Wn(r),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(r),$n(r,"created"),U.performance&&Ct&&(r._name=ve(r,!1),Ct(n),kt("vue "+r._name+" init",t,n)),r.$options.el&&r.$mount(r.$options.el)}}(Qn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){fe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){fe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Le,e.prototype.$delete=Ne,e.prototype.$watch=function(e,t,n){if(d(t))return Zn(this,e,t,n);(n=n||{}).user=!0;var o=new Un(this,e,t,n);if(n.immediate)try{t.call(this,o.value)}catch(e){nt(e,this,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}(Qn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var o=this;if(Array.isArray(e))for(var r=0,s=e.length;r<s;r++)o.$on(e[r],n);else(o._events[e]||(o._events[e]=[])).push(n),t.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,t){var n=this;function o(){n.$off(e,o),t.apply(n,arguments)}return o.fn=t,n.$on(e,o),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var o=0,r=e.length;o<r;o++)n.$off(e[o],t);return n}var s,i=n._events[e];if(!i)return n;if(!t)return n._events[e]=null,n;for(var a=i.length;a--;)if((s=i[a])===t||s.fn===t){i.splice(a,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&pe('Event "'+n+'" is emitted in component '+ve(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+$(e)+'" instead of "'+e+'".');var o=t._events[e];if(o){o=o.length>1?O(o):o;for(var r=O(arguments,1),s='event handler for "'+e+'"',i=0,a=o.length;i<a;i++)ot(o[i],t,r,t,s)}return t}}(Qn),function(e){e.prototype._update=function(e,t){var n=this,o=n.$el,r=n._vnode,s=kn(n);n._vnode=e,n.$el=r?n.__patch__(r,e):n.__patch__(n.$el,e,t,!1),s(),o&&(o.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){$n(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||g(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),$n(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Qn),function(e){nn(e.prototype),e.prototype.$nextTick=function(e){return ht(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,o=n.render,r=n._parentVnode;r&&(t.$scopedSlots=Vt(r.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=r;try{vn=t,e=o.call(t._renderProxy,t.$createElement)}catch(n){if(nt(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){nt(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{vn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof xe||(Array.isArray(e)&&fe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=ke()),e.parent=r,e}}(Qn);var so=[String,RegExp,Array],io={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:so,exclude:so,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)ro(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){oo(e,(function(e){return no(t,e)}))})),this.$watch("exclude",(function(t){oo(e,(function(e){return!no(t,e)}))}))},render:function(){var e=this.$slots.default,t=yn(e),n=t&&t.componentOptions;if(n){var o=to(n),r=this.include,s=this.exclude;if(r&&(!o||!no(r,o))||s&&o&&no(s,o))return t;var i=this.cache,a=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;i[u]?(t.componentInstance=i[u].componentInstance,g(a,u),a.push(u)):(i[u]=t,a.push(u),this.max&&a.length>parseInt(this.max)&&ro(i,a[0],a,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return U},set:function(){fe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:fe,extend:F,mergeOptions:qe,defineReactive:Me},e.set=Le,e.delete=Ne,e.nextTick=ht,e.observable=function(e){return Pe(e),e},e.options=Object.create(null),R.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,F(e.options.components,io),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=O(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=qe(this.options,e),this}}(e),eo(e),function(e){R.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&ze(e),"component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Qn),Object.defineProperty(Qn.prototype,"$isServer",{get:ae}),Object.defineProperty(Qn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Qn,"FunctionalRenderContext",{value:on}),Qn.version="2.6.10";var ao=_("style,class"),uo=_("input,textarea,option,select,progress"),lo=_("contenteditable,draggable,spellcheck"),co=_("events,caret,typing,plaintext-only"),fo=function(e,t){return _o(t)||"false"===t?"false":"contenteditable"===e&&co(t)?t:"true"},po=_("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),mo="http://www.w3.org/1999/xlink",vo=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},ho=function(e){return vo(e)?e.slice(6,e.length):""},_o=function(e){return null==e||!1===e};function yo(e){for(var t=e.data,n=e,o=e;s(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(t=jo(o.data,t));for(;s(n=n.parent);)n&&n.data&&(t=jo(t,n.data));return function(e,t){if(s(e)||s(t))return go(e,bo(t));return""}(t.staticClass,t.class)}function jo(e,t){return{staticClass:go(e.staticClass,t.staticClass),class:s(e.class)?[e.class,t.class]:t.class}}function go(e,t){return e?t?e+" "+t:e:t||""}function bo(e){return Array.isArray(e)?function(e){for(var t,n="",o=0,r=e.length;o<r;o++)s(t=bo(e[o]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):u(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var wo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},xo=_("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Co=_("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),ko=function(e){return xo(e)||Co(e)};var So=Object.create(null);var Ao=_("text,number,password,search,email,tel,url");var $o=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(wo[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),To={create:function(e,t){Oo(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Oo(e,!0),Oo(t))},destroy:function(e){Oo(e,!0)}};function Oo(e,t){var n=e.data.ref;if(s(n)){var o=e.context,r=e.componentInstance||e.elm,i=o.$refs;t?Array.isArray(i[n])?g(i[n],r):i[n]===r&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(r)<0&&i[n].push(r):i[n]=[r]:i[n]=r}}var Fo=new xe("",{},[]),Io=["create","activate","update","remove","destroy"];function Eo(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&s(e.data)===s(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,o=s(n=e.data)&&s(n=n.attrs)&&n.type,r=s(n=t.data)&&s(n=n.attrs)&&n.type;return o===r||Ao(o)&&Ao(r)}(e,t)||i(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&r(t.asyncFactory.error))}function Po(e,t,n){var o,r,i={};for(o=t;o<=n;++o)s(r=e[o].key)&&(i[r]=o);return i}var Mo={create:Lo,update:Lo,destroy:function(e){Lo(e,Fo)}};function Lo(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,o,r,s=e===Fo,i=t===Fo,a=Do(e.data.directives,e.context),u=Do(t.data.directives,t.context),l=[],c=[];for(n in u)o=a[n],r=u[n],o?(r.oldValue=o.value,r.oldArg=o.arg,Ro(r,"update",t,e),r.def&&r.def.componentUpdated&&c.push(r)):(Ro(r,"bind",t,e),r.def&&r.def.inserted&&l.push(r));if(l.length){var d=function(){for(var n=0;n<l.length;n++)Ro(l[n],"inserted",t,e)};s?It(t,"insert",d):d()}c.length&&It(t,"postpatch",(function(){for(var n=0;n<c.length;n++)Ro(c[n],"componentUpdated",t,e)}));if(!s)for(n in a)u[n]||Ro(a[n],"unbind",e,e,i)}(e,t)}var No=Object.create(null);function Do(e,t){var n,o,r=Object.create(null);if(!e)return r;for(n=0;n<e.length;n++)(o=e[n]).modifiers||(o.modifiers=No),r[Vo(o)]=o,o.def=Ge(t.$options,"directives",o.name,!0);return r}function Vo(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Ro(e,t,n,o,r){var s=e.def&&e.def[t];if(s)try{s(n.elm,e,n,o,r)}catch(o){nt(o,n.context,"directive "+e.name+" "+t+" hook")}}var Bo=[To,Mo];function Uo(e,t){var n=t.componentOptions;if(!(s(n)&&!1===n.Ctor.options.inheritAttrs||r(e.data.attrs)&&r(t.data.attrs))){var o,i,a=t.elm,u=e.data.attrs||{},l=t.data.attrs||{};for(o in s(l.__ob__)&&(l=t.data.attrs=F({},l)),l)i=l[o],u[o]!==i&&Ho(a,o,i);for(o in(Q||te)&&l.value!==u.value&&Ho(a,"value",l.value),u)r(l[o])&&(vo(o)?a.removeAttributeNS(mo,ho(o)):lo(o)||a.removeAttribute(o))}}function Ho(e,t,n){e.tagName.indexOf("-")>-1?zo(e,t,n):po(t)?_o(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):lo(t)?e.setAttribute(t,fo(t,n)):vo(t)?_o(n)?e.removeAttributeNS(mo,ho(t)):e.setAttributeNS(mo,t,n):zo(e,t,n)}function zo(e,t,n){if(_o(n))e.removeAttribute(t);else{if(Q&&!ee&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var o=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(t,n)}}var Wo={create:Uo,update:Uo};function qo(e,t){var n=t.elm,o=t.data,i=e.data;if(!(r(o.staticClass)&&r(o.class)&&(r(i)||r(i.staticClass)&&r(i.class)))){var a=yo(t),u=n._transitionClasses;s(u)&&(a=go(a,bo(u))),a!==n._prevClass&&(n.setAttribute("class",a),n._prevClass=a)}}var Go,Ko={create:qo,update:qo},Xo="__r",Zo="__c";function Yo(e,t,n){var o=Go;return function r(){var s=t.apply(null,arguments);null!==s&&er(e,r,n,o)}}var Jo=ut&&!(oe&&Number(oe[1])<=53);function Qo(e,t,n,o){if(Jo){var r=Nn,s=t;t=s._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return s.apply(this,arguments)}}Go.addEventListener(e,t,se?{capture:n,passive:o}:n)}function er(e,t,n,o){(o||Go).removeEventListener(e,t._wrapper||t,n)}function tr(e,t){if(!r(e.data.on)||!r(t.data.on)){var n=t.data.on||{},o=e.data.on||{};Go=t.elm,function(e){if(s(e[Xo])){var t=Q?"change":"input";e[t]=[].concat(e[Xo],e[t]||[]),delete e[Xo]}s(e[Zo])&&(e.change=[].concat(e[Zo],e.change||[]),delete e[Zo])}(n),Ft(n,o,Qo,er,Yo,t.context),Go=void 0}}var nr,or={create:tr,update:tr};function rr(e,t){if(!r(e.data.domProps)||!r(t.data.domProps)){var n,o,i=t.elm,a=e.data.domProps||{},u=t.data.domProps||{};for(n in s(u.__ob__)&&(u=t.data.domProps=F({},u)),a)n in u||(i[n]="");for(n in u){if(o=u[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),o===a[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n&&"PROGRESS"!==i.tagName){i._value=o;var l=r(o)?"":String(o);sr(i,l)&&(i.value=l)}else if("innerHTML"===n&&Co(i.tagName)&&r(i.innerHTML)){(nr=nr||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var c=nr.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;c.firstChild;)i.appendChild(c.firstChild)}else if(o!==a[n])try{i[n]=o}catch(e){}}}}function sr(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,o=e._vModifiers;if(s(o)){if(o.number)return h(n)!==h(t);if(o.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var ir={create:rr,update:rr},ar=x((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(n);o.length>1&&(t[o[0].trim()]=o[1].trim())}})),t}));function ur(e){var t=lr(e.style);return e.staticStyle?F(e.staticStyle,t):t}function lr(e){return Array.isArray(e)?I(e):"string"==typeof e?ar(e):e}var cr,dr=/^--/,fr=/\s*!important$/,pr=function(e,t,n){if(dr.test(t))e.style.setProperty(t,n);else if(fr.test(n))e.style.setProperty($(t),n.replace(fr,""),"important");else{var o=vr(t);if(Array.isArray(n))for(var r=0,s=n.length;r<s;r++)e.style[o]=n[r];else e.style[o]=n}},mr=["Webkit","Moz","ms"],vr=x((function(e){if(cr=cr||document.createElement("div").style,"filter"!==(e=k(e))&&e in cr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<mr.length;n++){var o=mr[n]+t;if(o in cr)return o}}));function hr(e,t){var n=t.data,o=e.data;if(!(r(n.staticStyle)&&r(n.style)&&r(o.staticStyle)&&r(o.style))){var i,a,u=t.elm,l=o.staticStyle,c=o.normalizedStyle||o.style||{},d=l||c,f=lr(t.data.style)||{};t.data.normalizedStyle=s(f.__ob__)?F({},f):f;var p=function(e,t){var n,o={};if(t)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=ur(r.data))&&F(o,n);(n=ur(e.data))&&F(o,n);for(var s=e;s=s.parent;)s.data&&(n=ur(s.data))&&F(o,n);return o}(t,!0);for(a in d)r(p[a])&&pr(u,a,"");for(a in p)(i=p[a])!==d[a]&&pr(u,a,null==i?"":i)}}var _r={create:hr,update:hr},yr=/\s+/;function jr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yr).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function gr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yr).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",o=" "+t+" ";n.indexOf(o)>=0;)n=n.replace(o," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function br(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&F(t,wr(e.name||"v")),F(t,e),t}return"string"==typeof e?wr(e):void 0}}var wr=x((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),xr=X&&!ee,Cr="transition",kr="animation",Sr="transition",Ar="transitionend",$r="animation",Tr="animationend";xr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Sr="WebkitTransition",Ar="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&($r="WebkitAnimation",Tr="webkitAnimationEnd"));var Or=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Fr(e){Or((function(){Or(e)}))}function Ir(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),jr(e,t))}function Er(e,t){e._transitionClasses&&g(e._transitionClasses,t),gr(e,t)}function Pr(e,t,n){var o=Lr(e,t),r=o.type,s=o.timeout,i=o.propCount;if(!r)return n();var a=r===Cr?Ar:Tr,u=0,l=function(){e.removeEventListener(a,c),n()},c=function(t){t.target===e&&++u>=i&&l()};setTimeout((function(){u<i&&l()}),s+1),e.addEventListener(a,c)}var Mr=/\b(transform|all)(,|$)/;function Lr(e,t){var n,o=window.getComputedStyle(e),r=(o[Sr+"Delay"]||"").split(", "),s=(o[Sr+"Duration"]||"").split(", "),i=Nr(r,s),a=(o[$r+"Delay"]||"").split(", "),u=(o[$r+"Duration"]||"").split(", "),l=Nr(a,u),c=0,d=0;return t===Cr?i>0&&(n=Cr,c=i,d=s.length):t===kr?l>0&&(n=kr,c=l,d=u.length):d=(n=(c=Math.max(i,l))>0?i>l?Cr:kr:null)?n===Cr?s.length:u.length:0,{type:n,timeout:c,propCount:d,hasTransform:n===Cr&&Mr.test(o[Sr+"Property"])}}function Nr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Dr(t)+Dr(e[n])})))}function Dr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Vr(e,t){var n=e.elm;s(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var o=br(e.data.transition);if(!r(o)&&!s(n._enterCb)&&1===n.nodeType){for(var i=o.css,a=o.type,l=o.enterClass,c=o.enterToClass,d=o.enterActiveClass,f=o.appearClass,p=o.appearToClass,m=o.appearActiveClass,v=o.beforeEnter,_=o.enter,y=o.afterEnter,j=o.enterCancelled,g=o.beforeAppear,b=o.appear,w=o.afterAppear,x=o.appearCancelled,C=o.duration,k=xn,S=xn.$vnode;S&&S.parent;)k=S.context,S=S.parent;var A=!k._isMounted||!e.isRootInsert;if(!A||b||""===b){var $=A&&f?f:l,T=A&&m?m:d,O=A&&p?p:c,F=A&&g||v,I=A&&"function"==typeof b?b:_,E=A&&w||y,P=A&&x||j,M=h(u(C)?C.enter:C);null!=M&&Br(M,"enter",e);var L=!1!==i&&!ee,N=Hr(I),V=n._enterCb=D((function(){L&&(Er(n,O),Er(n,T)),V.cancelled?(L&&Er(n,$),P&&P(n)):E&&E(n),n._enterCb=null}));e.data.show||It(e,"insert",(function(){var t=n.parentNode,o=t&&t._pending&&t._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),I&&I(n,V)})),F&&F(n),L&&(Ir(n,$),Ir(n,T),Fr((function(){Er(n,$),V.cancelled||(Ir(n,O),N||(Ur(M)?setTimeout(V,M):Pr(n,a,V)))}))),e.data.show&&(t&&t(),I&&I(n,V)),L||N||V()}}}function Rr(e,t){var n=e.elm;s(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var o=br(e.data.transition);if(r(o)||1!==n.nodeType)return t();if(!s(n._leaveCb)){var i=o.css,a=o.type,l=o.leaveClass,c=o.leaveToClass,d=o.leaveActiveClass,f=o.beforeLeave,p=o.leave,m=o.afterLeave,v=o.leaveCancelled,_=o.delayLeave,y=o.duration,j=!1!==i&&!ee,g=Hr(p),b=h(u(y)?y.leave:y);s(b)&&Br(b,"leave",e);var w=n._leaveCb=D((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),j&&(Er(n,c),Er(n,d)),w.cancelled?(j&&Er(n,l),v&&v(n)):(t(),m&&m(n)),n._leaveCb=null}));_?_(x):x()}function x(){w.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),f&&f(n),j&&(Ir(n,l),Ir(n,d),Fr((function(){Er(n,l),w.cancelled||(Ir(n,c),g||(Ur(b)?setTimeout(w,b):Pr(n,a,w)))}))),p&&p(n,w),j||g||w())}}function Br(e,t,n){"number"!=typeof e?fe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&fe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Ur(e){return"number"==typeof e&&!isNaN(e)}function Hr(e){if(r(e))return!1;var t=e.fns;return s(t)?Hr(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function zr(e,t){!0!==t.data.show&&Vr(t)}var Wr=function(e){var t,n,o={},u=e.modules,l=e.nodeOps;for(t=0;t<Io.length;++t)for(o[Io[t]]=[],n=0;n<u.length;++n)s(u[n][Io[t]])&&o[Io[t]].push(u[n][Io[t]]);function c(e){var t=l.parentNode(e);s(t)&&l.removeChild(t,e)}function d(e,t){return!t&&!e.ns&&!(U.ignoredElements.length&&U.ignoredElements.some((function(t){return f(t)?t.test(e.tag):t===e.tag})))&&U.isUnknownElement(e.tag)}var p=0;function m(e,t,n,r,a,u,c){if(s(e.elm)&&s(u)&&(e=u[c]=Ae(e)),e.isRootInsert=!a,!function(e,t,n,r){var a=e.data;if(s(a)){var u=s(e.componentInstance)&&a.keepAlive;if(s(a=a.hook)&&s(a=a.init)&&a(e,!1),s(e.componentInstance))return v(e,t),h(n,e.elm,r),i(u)&&function(e,t,n,r){var i,a=e;for(;a.componentInstance;)if(a=a.componentInstance._vnode,s(i=a.data)&&s(i=i.transition)){for(i=0;i<o.activate.length;++i)o.activate[i](Fo,a);t.push(a);break}h(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var f=e.data,m=e.children,_=e.tag;s(_)?(f&&f.pre&&p++,d(e,p)&&fe("Unknown custom element: <"+_+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?l.createElementNS(e.ns,_):l.createElement(_,e),b(e),y(e,m,t),s(f)&&g(e,t),h(n,e.elm,r),f&&f.pre&&p--):i(e.isComment)?(e.elm=l.createComment(e.text),h(n,e.elm,r)):(e.elm=l.createTextNode(e.text),h(n,e.elm,r))}}function v(e,t){s(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,j(e)?(g(e,t),b(e)):(Oo(e),t.push(e))}function h(e,t,n){s(e)&&(s(n)?l.parentNode(n)===e&&l.insertBefore(e,t,n):l.appendChild(e,t))}function y(e,t,n){if(Array.isArray(t)){S(t);for(var o=0;o<t.length;++o)m(t[o],n,e.elm,null,!0,t,o)}else a(e.text)&&l.appendChild(e.elm,l.createTextNode(String(e.text)))}function j(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return s(e.tag)}function g(e,n){for(var r=0;r<o.create.length;++r)o.create[r](Fo,e);s(t=e.data.hook)&&(s(t.create)&&t.create(Fo,e),s(t.insert)&&n.push(e))}function b(e){var t;if(s(t=e.fnScopeId))l.setStyleScope(e.elm,t);else for(var n=e;n;)s(t=n.context)&&s(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t),n=n.parent;s(t=xn)&&t!==e.context&&t!==e.fnContext&&s(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t)}function w(e,t,n,o,r,s){for(;o<=r;++o)m(n[o],s,e,t,!1,n,o)}function x(e){var t,n,r=e.data;if(s(r))for(s(t=r.hook)&&s(t=t.destroy)&&t(e),t=0;t<o.destroy.length;++t)o.destroy[t](e);if(s(t=e.children))for(n=0;n<e.children.length;++n)x(e.children[n])}function C(e,t,n,o){for(;n<=o;++n){var r=t[n];s(r)&&(s(r.tag)?(k(r),x(r)):c(r.elm))}}function k(e,t){if(s(t)||s(e.data)){var n,r=o.remove.length+1;for(s(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&c(e)}return n.listeners=t,n}(e.elm,r),s(n=e.componentInstance)&&s(n=n._vnode)&&s(n.data)&&k(n,t),n=0;n<o.remove.length;++n)o.remove[n](e,t);s(n=e.data.hook)&&s(n=n.remove)?n(e,t):t()}else c(e.elm)}function S(e){for(var t={},n=0;n<e.length;n++){var o=e[n],r=o.key;s(r)&&(t[r]?fe("Duplicate keys detected: '"+r+"'. This may cause an update error.",o.context):t[r]=!0)}}function A(e,t,n,o){for(var r=n;r<o;r++){var i=t[r];if(s(i)&&Eo(e,i))return r}}function $(e,t,n,a,u,c){if(e!==t){s(t.elm)&&s(a)&&(t=a[u]=Ae(t));var d=t.elm=e.elm;if(i(e.isAsyncPlaceholder))s(t.asyncFactory.resolved)?I(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,p=t.data;s(p)&&s(f=p.hook)&&s(f=f.prepatch)&&f(e,t);var v=e.children,h=t.children;if(s(p)&&j(t)){for(f=0;f<o.update.length;++f)o.update[f](e,t);s(f=p.hook)&&s(f=f.update)&&f(e,t)}r(t.text)?s(v)&&s(h)?v!==h&&function(e,t,n,o,i){var a,u,c,d=0,f=0,p=t.length-1,v=t[0],h=t[p],_=n.length-1,y=n[0],j=n[_],g=!i;for(S(n);d<=p&&f<=_;)r(v)?v=t[++d]:r(h)?h=t[--p]:Eo(v,y)?($(v,y,o,n,f),v=t[++d],y=n[++f]):Eo(h,j)?($(h,j,o,n,_),h=t[--p],j=n[--_]):Eo(v,j)?($(v,j,o,n,_),g&&l.insertBefore(e,v.elm,l.nextSibling(h.elm)),v=t[++d],j=n[--_]):Eo(h,y)?($(h,y,o,n,f),g&&l.insertBefore(e,h.elm,v.elm),h=t[--p],y=n[++f]):(r(a)&&(a=Po(t,d,p)),r(u=s(y.key)?a[y.key]:A(y,t,d,p))?m(y,o,e,v.elm,!1,n,f):Eo(c=t[u],y)?($(c,y,o,n,f),t[u]=void 0,g&&l.insertBefore(e,c.elm,v.elm)):m(y,o,e,v.elm,!1,n,f),y=n[++f]);d>p?w(e,r(n[_+1])?null:n[_+1].elm,n,f,_,o):f>_&&C(0,t,d,p)}(d,v,h,n,c):s(h)?(S(h),s(e.text)&&l.setTextContent(d,""),w(d,null,h,0,h.length-1,n)):s(v)?C(0,v,0,v.length-1):s(e.text)&&l.setTextContent(d,""):e.text!==t.text&&l.setTextContent(d,t.text),s(p)&&s(f=p.hook)&&s(f=f.postpatch)&&f(e,t)}}}function T(e,t,n){if(i(n)&&s(e.parent))e.parent.data.pendingInsert=t;else for(var o=0;o<t.length;++o)t[o].data.hook.insert(t[o])}var O=!1,F=_("attrs,class,staticClass,staticStyle,key");function I(e,t,n,o){var r,a=t.tag,u=t.data,l=t.children;if(o=o||u&&u.pre,t.elm=e,i(t.isComment)&&s(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return s(t.tag)?0===t.tag.indexOf("vue-component")||!d(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,o))return!1;if(s(u)&&(s(r=u.hook)&&s(r=r.init)&&r(t,!0),s(r=t.componentInstance)))return v(t,n),!0;if(s(a)){if(s(l))if(e.hasChildNodes())if(s(r=u)&&s(r=r.domProps)&&s(r=r.innerHTML)){if(r!==e.innerHTML)return"undefined"==typeof console||O||(O=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",r),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var c=!0,f=e.firstChild,p=0;p<l.length;p++){if(!f||!I(f,l[p],n,o)){c=!1;break}f=f.nextSibling}if(!c||f)return"undefined"==typeof console||O||(O=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,l)),!1}else y(t,l,n);if(s(u)){var m=!1;for(var h in u)if(!F(h)){m=!0,g(t,n);break}!m&&u.class&&At(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,a){if(!r(t)){var u,c=!1,d=[];if(r(e))c=!0,m(t,d);else{var f=s(e.nodeType);if(!f&&Eo(e,t))$(e,t,d,null,null,a);else{if(f){if(1===e.nodeType&&e.hasAttribute(V)&&(e.removeAttribute(V),n=!0),i(n)){if(I(e,t,d))return T(t,d,!0),e;fe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}u=e,e=new xe(l.tagName(u).toLowerCase(),{},[],void 0,u)}var p=e.elm,v=l.parentNode(p);if(m(t,d,p._leaveCb?null:v,l.nextSibling(p)),s(t.parent))for(var h=t.parent,_=j(t);h;){for(var y=0;y<o.destroy.length;++y)o.destroy[y](h);if(h.elm=t.elm,_){for(var g=0;g<o.create.length;++g)o.create[g](Fo,h);var b=h.data.hook.insert;if(b.merged)for(var w=1;w<b.fns.length;w++)b.fns[w]()}else Oo(h);h=h.parent}s(v)?C(0,[e],0,0):s(e.tag)&&x(e)}}return T(t,d,c),t.elm}s(e)&&x(e)}}({nodeOps:$o,modules:[Wo,Ko,or,ir,_r,X?{create:zr,activate:zr,remove:function(e,t){!0!==e.data.show?Rr(e,t):t()}}:{}].concat(Bo)});ee&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Qr(e,"input")}));var qr={inserted:function(e,t,n,o){"select"===n.tag?(o.elm&&!o.elm._vOptions?It(n,"postpatch",(function(){qr.componentUpdated(e,t,n)})):Gr(e,t,n.context),e._vOptions=[].map.call(e.options,Zr)):("textarea"===n.tag||Ao(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Yr),e.addEventListener("compositionend",Jr),e.addEventListener("change",Jr),ee&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Gr(e,t,n.context);var o=e._vOptions,r=e._vOptions=[].map.call(e.options,Zr);if(r.some((function(e,t){return!L(e,o[t])})))(e.multiple?t.value.some((function(e){return Xr(e,r)})):t.value!==t.oldValue&&Xr(t.value,r))&&Qr(e,"change")}}};function Gr(e,t,n){Kr(e,t,n),(Q||te)&&setTimeout((function(){Kr(e,t,n)}),0)}function Kr(e,t,n){var o=t.value,r=e.multiple;if(!r||Array.isArray(o)){for(var s,i,a=0,u=e.options.length;a<u;a++)if(i=e.options[a],r)s=N(o,Zr(i))>-1,i.selected!==s&&(i.selected=s);else if(L(Zr(i),o))return void(e.selectedIndex!==a&&(e.selectedIndex=a));r||(e.selectedIndex=-1)}else fe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(o).slice(8,-1),n)}function Xr(e,t){return t.every((function(t){return!L(t,e)}))}function Zr(e){return"_value"in e?e._value:e.value}function Yr(e){e.target.composing=!0}function Jr(e){e.target.composing&&(e.target.composing=!1,Qr(e.target,"input"))}function Qr(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function es(e){return!e.componentInstance||e.data&&e.data.transition?e:es(e.componentInstance._vnode)}var ts={model:qr,show:{bind:function(e,t,n){var o=t.value,r=(n=es(n)).data&&n.data.transition,s=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&r?(n.data.show=!0,Vr(n,(function(){e.style.display=s}))):e.style.display=o?s:"none"},update:function(e,t,n){var o=t.value;!o!=!t.oldValue&&((n=es(n)).data&&n.data.transition?(n.data.show=!0,o?Vr(n,(function(){e.style.display=e.__vOriginalDisplay})):Rr(n,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,o,r){r||(e.style.display=e.__vOriginalDisplay)}}},ns={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function os(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?os(yn(t.children)):e}function rs(e){var t={},n=e.$options;for(var o in n.propsData)t[o]=e[o];var r=n._parentListeners;for(var s in r)t[k(s)]=r[s];return t}function ss(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var is=function(e){return e.tag||_n(e)},as=function(e){return"show"===e.name},us={name:"transition",props:ns,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(is)).length){n.length>1&&fe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var o=this.mode;o&&"in-out"!==o&&"out-in"!==o&&fe("invalid <transition> mode: "+o,this.$parent);var r=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var s=os(r);if(!s)return r;if(this._leaving)return ss(e,r);var i="__transition-"+this._uid+"-";s.key=null==s.key?s.isComment?i+"comment":i+s.tag:a(s.key)?0===String(s.key).indexOf(i)?s.key:i+s.key:s.key;var u=(s.data||(s.data={})).transition=rs(this),l=this._vnode,c=os(l);if(s.data.directives&&s.data.directives.some(as)&&(s.data.show=!0),c&&c.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(s,c)&&!_n(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var d=c.data.transition=F({},u);if("out-in"===o)return this._leaving=!0,It(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ss(e,r);if("in-out"===o){if(_n(s))return l;var f,p=function(){f()};It(u,"afterEnter",p),It(u,"enterCancelled",p),It(d,"delayLeave",(function(e){f=e}))}}return r}}},ls=F({tag:String,moveClass:String},ns);function cs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ds(e){e.data.newPos=e.elm.getBoundingClientRect()}function fs(e){var t=e.data.pos,n=e.data.newPos,o=t.left-n.left,r=t.top-n.top;if(o||r){e.data.moved=!0;var s=e.elm.style;s.transform=s.WebkitTransform="translate("+o+"px,"+r+"px)",s.transitionDuration="0s"}}delete ls.mode;var ps={Transition:us,TransitionGroup:{props:ls,beforeMount:function(){var e=this,t=this._update;this._update=function(n,o){var r=kn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),t.call(e,n,o)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],s=this.children=[],i=rs(this),a=0;a<r.length;a++){var u=r[a];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))s.push(u),n[u.key]=u,(u.data||(u.data={})).transition=i;else{var l=u.componentOptions,c=l?l.Ctor.options.name||l.tag||"":u.tag;fe("<transition-group> children must be keyed: <"+c+">")}}if(o){for(var d=[],f=[],p=0;p<o.length;p++){var m=o[p];m.data.transition=i,m.data.pos=m.elm.getBoundingClientRect(),n[m.key]?d.push(m):f.push(m)}this.kept=e(t,null,d),this.removed=f}return e(t,null,s)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(cs),e.forEach(ds),e.forEach(fs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,o=n.style;Ir(n,t),o.transform=o.WebkitTransform=o.transitionDuration="",n.addEventListener(Ar,n._moveCb=function e(o){o&&o.target!==n||o&&!/transform$/.test(o.propertyName)||(n.removeEventListener(Ar,e),n._moveCb=null,Er(n,t))})}})))},methods:{hasMove:function(e,t){if(!xr)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){gr(n,e)})),jr(n,t),n.style.display="none",this.$el.appendChild(n);var o=Lr(n);return this.$el.removeChild(n),this._hasMove=o.hasTransform}}}};Qn.config.mustUseProp=function(e,t,n){return"value"===n&&uo(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Qn.config.isReservedTag=ko,Qn.config.isReservedAttr=ao,Qn.config.getTagNamespace=function(e){return Co(e)?"svg":"math"===e?"math":void 0},Qn.config.isUnknownElement=function(e){if(!X)return!0;if(ko(e))return!1;if(e=e.toLowerCase(),null!=So[e])return So[e];var t=document.createElement(e);return e.indexOf("-")>-1?So[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:So[e]=/HTMLUnknownElement/.test(t.toString())},F(Qn.options.directives,ts),F(Qn.options.components,ps),Qn.prototype.__patch__=X?Wr:E,Qn.prototype.$mount=function(e,t){return function(e,t,n){var o;return e.$el=t,e.$options.render||(e.$options.render=ke,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?fe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):fe("Failed to mount component: template or render function not defined.",e)),$n(e,"beforeMount"),o=U.performance&&Ct?function(){var t=e._name,o=e._uid,r="vue-perf-start:"+o,s="vue-perf-end:"+o;Ct(r);var i=e._render();Ct(s),kt("vue "+t+" render",r,s),Ct(r),e._update(i,n),Ct(s),kt("vue "+t+" patch",r,s)}:function(){e._update(e._render(),n)},new Un(e,o,E,{before:function(){e._isMounted&&!e._isDestroyed&&$n(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,$n(e,"mounted")),e}(this,e=e&&X?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||(fe("Cannot find element: "+e),document.createElement("div"))}return e}(e):void 0,t)},X&&setTimeout((function(){U.devtools&&(ue?ue.emit("init",Qn):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==U.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0),t.default=Qn}.call(this,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../timers-browserify/main.js */"./node_modules/timers-browserify/main.js").setImmediate)},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvX2RhdGEvX2Zvcm1TZWxlY3RUYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9Gb3JtQ29udHJvbGxlci5qcz9iMTMxIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL0Zvcm1Db250cm9sbGVyLnB1Zz8zOTBmIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL0Zvcm1Db250cm9sbGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL0lucHV0VGV4dC9JbnB1dFRleHQuanM/Yzg0ZCIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL0lucHV0VGV4dC9JbnB1dFRleHQucHVnPzVkMWUiLCJ3ZWJwYWNrOi8vLy4vanMvX21vZHVsZXMvRm9ybUNvbnRyb2xsZXIvY29tcG9uZW50cy9JbnB1dFRleHQvSW5wdXRUZXh0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuanM/YzVkZiIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QucHVnPzFiZWQiLCJ3ZWJwYWNrOi8vLy4vanMvX21vZHVsZXMvRm9ybUNvbnRyb2xsZXIvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9fc2Nyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvX21vZHVsZXMvX3NldFZpZXdwb3J0LmpzIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL19zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL0Zvcm1Db250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL2NvbXBvbmVudHMvSW5wdXRUZXh0L0lucHV0VGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL0Zvcm1Db250cm9sbGVyLnB1ZyIsIndlYnBhY2s6Ly8vLi9qcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL0lucHV0VGV4dC9JbnB1dFRleHQucHVnIiwid2VicGFjazovLy8uL2pzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL2NvbXBvbmVudHMvU2VsZWN0L1NlbGVjdC5wdWciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJmb3JtU2VsZWN0VGFibGUiLCJwcm92aWRlciIsInByb3ZpZGVyVG9QcmVmIiwidGVwY28iLCJwcmVmIiwiaGVwY28iLCJjaHVkZW4iLCJyaWt1ZGVuIiwia2VwY28iLCJlbmVyZ2lhIiwieW9uZGVuIiwia3l1ZGVuIiwib2tpZGVuIiwib3RoZXIiLCJjb21wb25lbnQiLCJvcHRpb25zIiwiX19maWxlIiwiU2Nyb2xsZXIiLCJ0aGlzIiwiJGJ1dHRvbiIsIiQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNjcm9sbCIsImN1cnJlbnRUYXJnZXQiLCIkZWwiLCJocmVmIiwiYXR0ciIsInRhcmdldElkIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsInVhIiwiZGV2aWNlVHlwZXMiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0lQaG9uZSIsInRlc3QiLCJpc0lQYWQiLCJpc1dpbmRvd3NQaG9uZSIsImlzV2luZG93c1RhYmxldCIsImlzQW5kcm9pZCIsImlzQW5kcm9pZE1vYmlsZSIsImlzQW5kcm9pZFRhYmxldCIsImlzQmxhY2tCZXJyeSIsImlzQmxhY2tCZXJyeVRhYmxldCIsImlzTW9iaWxlIiwiaXNUYWJsZXQiLCJzbGljayIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImRvdHMiLCJhcnJvd3MiLCJ2YXJpYWJsZVdpZHRoIiwiaW5maW5pdGUiLCJzbGlkZXNUb1Nob3ciLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwiY2VudGVyTW9kZSIsIlByb21pc2UiLCJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiZm9ybSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW5kZXIiLCJoIiwiRm9ybUNvbnRyb2xsZXIiLCIkbW91bnQiLCJpbml0IiwiU2xpZGVyIiwiU2V0Vmlld3BvcnQiLCJjb21wb25lbnRzIiwiSW5wdXRUZXh0IiwiU2VsZWN0IiwiZGF0YSIsInNlbGVjdExpc3QiLCJzZW5kVmFsdWVzIiwiY29tcGFueSIsInBob25lIiwiZW1haWwiLCJ2YWxpZGF0ZVN0YXR1cyIsInZhbGlkYXRlVHlwZSIsImlzVmFsaWQiLCJjb21wdXRlZCIsImdldFByb3ZpZGVyTGlzdCIsImdldFByZWZMaXN0IiwiY29uY2F0IiwibWV0aG9kcyIsImNoYW5nZVNlbmRWYWx1ZSIsIiRzZXQiLCJ2YWxpZGF0ZSIsIm9uQ2hhbmdlTGlzdCIsInZhbGlkYXRlQWxsIiwidmFsdWVzIiwibWF0Y2giLCJvblN1Ym1pdCIsImFsZXJ0IiwicHJvcHMiLCJTdHJpbmciLCJ0eXBlIiwiaGVhZGluZyIsInBsYWNlaG9sZGVyIiwiZXJyb3JNZXNzYWdlIiwiY3VycmVudFZhbHVlIiwiQm9vbGVhbiIsImlucHV0dGVkIiwic2V0IiwiJGVtaXQiLCJsaXN0IiwiQXJyYXkiLCJjaGlsZExpc3QiLCJzZWxlY3RlZCIsIml0IiwiVHlwZUVycm9yIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwidW5kZWZpbmVkIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImlzT2JqZWN0IiwidG9JT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJPIiwibGVuZ3RoIiwiaW5kZXgiLCJjb2YiLCJUQUciLCJBUkciLCJhcmd1bWVudHMiLCJUIiwiQiIsInRyeUdldCIsImNhbGxlZSIsInRvU3RyaW5nIiwic2xpY2UiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImEiLCJiIiwiYXBwbHkiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJzcGxpdCIsImdsb2JhbCIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImV4ZWMiLCJmYWlscyIsImRlZmluZWQiLCJ3a3MiLCJLRVkiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJSZWdFeHAiLCJzdHJpbmciLCJhcmciLCJpc0FycmF5SXRlciIsImFuT2JqZWN0IiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsImVudHJpZXMiLCJJVEVSQVRPUiIsInN0ZXAiLCJpdGVyYXRvciIsInJlc3VsdCIsIml0ZXJGbiIsImYiLCJuZXh0IiwiZG9uZSIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZFAiLCJjcmVhdGVEZXNjIiwiZG9jdW1lbnRFbGVtZW50IiwiYXJncyIsInVuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJdGVyYXRvcnMiLCJyZXQiLCJkZXNjcmlwdG9yIiwic2V0VG9TdHJpbmdUYWciLCJJdGVyYXRvclByb3RvdHlwZSIsIk5BTUUiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJmcm9tIiwic2tpcENsb3NpbmciLCJzYWZlIiwiYXJyIiwiaXRlciIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJwcm9jZXNzIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwic3RhbmRhbG9uZSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsIlByb21pc2VDYXBhYmlsaXR5IiwiQyIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiQXR0cmlidXRlcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiaGFzIiwidG9PYmplY3QiLCJPYmplY3RQcm90byIsImNvbnN0cnVjdG9yIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJwdXNoIiwiJGtleXMiLCJpc0VudW0iLCJpc0VudHJpZXMiLCJ2IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJ4IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsImRlZiIsInRhZyIsInN0YXQiLCJzaGFyZWQiLCJ1aWQiLCJzdG9yZSIsImNvcHlyaWdodCIsIkQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJpZCIsImxpc3RlbmVyIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImNsZWFyIiwidG9JbnRlZ2VyIiwibWF4IiwibWluIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJJT2JqZWN0IiwidmFsdWVPZiIsInB4IiwicmFuZG9tIiwiVVNFX1NZTUJPTCIsImNsYXNzb2YiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsIkZQcm90byIsIm5hbWVSRSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwiYW5JbnN0YW5jZSIsImZvck9mIiwic3BlY2llc0NvbnN0cnVjdG9yIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImluZGV4T2YiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfZCIsIl93IiwiJHJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJNQVRDSCIsIiRtYXRjaCIsInJlZ2V4cCIsIiR2YWx1ZXMiLCIkaXRlcmF0b3JzIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInJlZ2lzdGVySW1tZWRpYXRlIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNjb3BlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsIl92bSIsIiRjcmVhdGVFbGVtZW50IiwiX3NlbGYiLCJzdGF0aWNDbGFzcyIsInN1Ym1pdCIsIiRldmVudCIsIl9tIiwiYXR0cnMiLCJzdGF0aWNSZW5kZXJGbnMiLCJfd2l0aFN0cmlwcGVkIiwiX2UiLCJkaXJlY3RpdmVzIiwicmF3TmFtZSIsImV4cHJlc3Npb24iLCJkb21Qcm9wcyIsImNoZWNrZWQiLCJpc0FycmF5IiwiY2hhbmdlIiwiJCRhIiwiJCRlbCIsIiQkYyIsIiQkaSIsIl9xIiwiaW5wdXQiLCJjb21wb3NpbmciLCJpbm5lckhUTUwiLCIkJHNlbGVjdGVkVmFsIiwiZmlsdGVyIiwibWFwIiwiX3ZhbHVlIiwibXVsdGlwbGUiLCJfbCIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJzY29wZUlkIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJob29rIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsIl9zY29wZUlkIiwiY29udGV4dCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiYWRkIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJvYmoiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsImNhdGNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvTnVtYmVyIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJzcGxpY2UiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZSIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJyZXMiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsIkRhdGUiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiU2V0Iiwid2FybiIsInRpcCIsImdlbmVyYXRlQ29tcG9uZW50VHJhY2UiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiaGFzQ29uc29sZSIsImNsYXNzaWZ5UkUiLCJtc2ciLCJ2bSIsInRyYWNlIiwiaW5jbHVkZUZpbGUiLCJjaWQiLCJfaXNWdWUiLCJfY29tcG9uZW50VGFnIiwiZmlsZSIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwicmVwZWF0IiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInNvcnQiLCJ1cGRhdGUiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJWTm9kZSIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwidm1Db3VudCIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiYXNzZXJ0T2JqZWN0VHlwZSIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsImtleSQxIiwiaW5qZWN0IiwicHJvdmlkZSIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm1lcmdlT3B0aW9ucyIsImNoZWNrQ29tcG9uZW50cyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJtZXNzYWdlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwic29tZSIsImVsZW0iLCJpc0Jvb2xlYW4iLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJhc3NlcnRQcm9wIiwic2ltcGxlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJOdW1iZXIiLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJ0aW1lckZ1bmMiLCJpbml0UHJveHkiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNiIiwiX3Jlc29sdmUiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwiX3JlbmRlclByb3h5IiwibWFyayIsIm1lYXN1cmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImhhc2giLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwiaXNUZXh0Tm9kZSIsInNoaWZ0IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9mIiwiX2IiLCJfdSIsIl9nIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsInRoaXMkMSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmUiLCJkZXZ0b29sc01ldGEiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiaXNJbkluYWN0aXZlVHJlZSIsIiRjaGlsZHJlbiIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJvd25lciIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsInN5bmMiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsImVuc3VyZUN0b3IiLCJkZWxheSIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImtleUluTG93ZXJDYXNlIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiZm9yY2UiLCJjbGFzcyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJjb21wIiwiYmFzZSIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImoiLCJfaGFzSG9va0V2ZW50IiwiTUFYX1VQREFURV9DT1VOVCIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInVzZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwibGF6eSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJjcmVhdGVXYXRjaGVyIiwiaW5pdFdhdGNoIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCIkd2F0Y2giLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJtaXhpbiIsInVzZSIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiX25hbWUiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwibG93ZXJDYXNlRXZlbnQiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyRXJyb3IiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdFVzZSIsImluaXRNaXhpbiQxIiwiZGVmaW5pdGlvbiIsImluaXRBc3NldFJlZ2lzdGVycyIsImluaXRHbG9iYWxBUEkiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImdlbkNsYXNzRm9yVm5vZGUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsIm93bmVyRG9jdW1lbnQiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJub3JtYWxpemVFdmVudHMiLCJzdmdDb250YWluZXIiLCJldmVudHMiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiY2hpbGROb2RlcyIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiZmlyc3RDaGlsZCIsImNoZWNrVmFsIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwidHJpbSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwiZW5kIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJjaGVja0R1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJpc1Vua25vd25FbGVtZW50JCQxIiwiaW5WUHJlIiwiaWdub3JlIiwiY3JlYXRpbmdFbG1JblZQcmUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJzZWVuS2V5cyIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwib2xkRWxtIiwicGF0Y2hhYmxlIiwiaSQyIiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsIm1vdW50Q29tcG9uZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5IiwiZyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFP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NUosR0FFYyxpQkFBWGMsU0FBcUJ1bUQsRUFBSXZtRCxRQU9yQ3JFLEVBQU9ELFFBQVU2cUQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9qcy9hcHAuanNcIik7XG4iLCIvKipcbiAqIOmbu+WKm+S8muekvuOBqOmDvemBk+W6nOecjOOBqOOBruWvvueFp+ihqFxuICogdG9kbyDmnIDlsI/pmZDjga7lrp/oo4XjgafjgYLjgovjgZ/jgoHjgIHmi6HlvLXmgKfjgpLogIPjgYjjgabjg6rjg6zjg7zjgrfjg6fjg4rjg6vjg4fjg7zjgr/jg5njg7zjgrnpoqjjgavlpInjgYjjgZ/jgYRcbiAqIEB0eXBlIHt7cHJvdmlkZXI6ICpbXSwgcHJvdmlkZXJUb1ByZWY6IHtreXVkZW46IHtwcmVmOiAqW119LCByaWt1ZGVuOiB7cHJlZjogKltdfSwga2VwY286IHtwcmVmOiAqW119LCBvdGhlcjoge3ByZWY6IHtuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9W119LCBoZXBjbzoge3ByZWY6ICpbXX0sIGVuZXJnaWE6IHtwcmVmOiAqW119LCB0ZXBjbzoge3ByZWY6ICpbXX0sIFwidG9ob2t1LWVwY29cIjoge3ByZWY6ICpbXX0sIGNodWRlbjoge3ByZWY6ICpbXX0sIG9raWRlbjoge3ByZWY6ICpbXX0sIHlvbmRlbjoge3ByZWY6ICpbXX19fX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1TZWxlY3RUYWJsZSA9IHtcbiAgcHJvdmlkZXI6IFtcbiAgICB7XG4gICAgICBuYW1lOiAn5p2x5Lqs6Zu75YqbJyxcbiAgICAgIHZhbHVlOiAndGVwY28nLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ+WMl+a1t+mBk+mbu+WKmycsXG4gICAgICB2YWx1ZTogJ2hlcGNvJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfmnbHljJfpm7vlipsnLFxuICAgICAgdmFsdWU6ICd0b2hva3UtZXBjbycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn5Lit6YOo6Zu75YqbJyxcbiAgICAgIHZhbHVlOiAnY2h1ZGVuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfljJfpmbjpm7vlipsnLFxuICAgICAgdmFsdWU6ICdyaWt1ZGVuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfplqLopb/pm7vlipsnLFxuICAgICAgdmFsdWU6ICdrZXBjbycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn5Lit5Zu96Zu75YqbJyxcbiAgICAgIHZhbHVlOiAnZW5lcmdpYScsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn5Zub5Zu96Zu75YqbJyxcbiAgICAgIHZhbHVlOiAneW9uZGVuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfkuZ3lt57pm7vlipsnLFxuICAgICAgdmFsdWU6ICdreXVkZW4nLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ+aylue4hOmbu+WKmycsXG4gICAgICB2YWx1ZTogJ29raWRlbicsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgIHZhbHVlOiAnb3RoZXInLFxuICAgIH0sXG4gIF0sXG4gIHByb3ZpZGVyVG9QcmVmOiB7XG4gICAgdGVwY286IHtcbiAgICAgIHByZWY6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfmnbHkuqzpg70nLFxuICAgICAgICAgIHZhbHVlOiAndG9reW8nLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+OBneOBruS7licsXG4gICAgICAgICAgdmFsdWU6ICdvdGhlcicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgaGVwY286IHtcbiAgICAgIHByZWY6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfljJfmtbfpgZMnLFxuICAgICAgICAgIHZhbHVlOiAnaG9ra2FpZG8nLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+OBneOBruS7licsXG4gICAgICAgICAgdmFsdWU6ICdvdGhlcicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgJ3RvaG9rdS1lcGNvJzoge1xuICAgICAgcHJlZjogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+WuruWfjuecjCcsXG4gICAgICAgICAgdmFsdWU6ICdtaXlhZ2knLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+OBneOBruS7licsXG4gICAgICAgICAgdmFsdWU6ICdvdGhlcicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgY2h1ZGVuOiB7XG4gICAgICBwcmVmOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn6ZW36YeO55yMJyxcbiAgICAgICAgICB2YWx1ZTogJ25hZ2FubycsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgICAgICB2YWx1ZTogJ290aGVyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICByaWt1ZGVuOiB7XG4gICAgICBwcmVmOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn5a+M5bGx55yMJyxcbiAgICAgICAgICB2YWx1ZTogJ3RveWFtYScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgICAgICB2YWx1ZTogJ290aGVyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBrZXBjbzoge1xuICAgICAgcHJlZjogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+Wkp+mYquW6nCcsXG4gICAgICAgICAgdmFsdWU6ICdvc2FrYScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgICAgICB2YWx1ZTogJ290aGVyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBlbmVyZ2lhOiB7XG4gICAgICBwcmVmOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn5bqD5bO255yMJyxcbiAgICAgICAgICB2YWx1ZTogJ2hpcm9zaGltYScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgICAgICB2YWx1ZTogJ290aGVyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB5b25kZW46IHtcbiAgICAgIHByZWY6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICflvrPls7bnnIwnLFxuICAgICAgICAgIHZhbHVlOiAndG9rdXNoaW1hJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfjgZ3jga7ku5YnLFxuICAgICAgICAgIHZhbHVlOiAnb3RoZXInLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGt5dWRlbjoge1xuICAgICAgcHJlZjogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+emj+WyoeecjCcsXG4gICAgICAgICAgdmFsdWU6ICdmdWt1b2thJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfjgZ3jga7ku5YnLFxuICAgICAgICAgIHZhbHVlOiAnb3RoZXInLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIG9raWRlbjoge1xuICAgICAgcHJlZjogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+aylue4hOecjCcsXG4gICAgICAgICAgdmFsdWU6ICdva2luYXdhJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfjgZ3jga7ku5YnLFxuICAgICAgICAgIHZhbHVlOiAnb3RoZXInLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIG90aGVyOiB7XG4gICAgICBwcmVmOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44Gd44Gu5LuWJyxcbiAgICAgICAgICB2YWx1ZTogJ290aGVyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanM/P3JlZi0tMCEuL0Zvcm1Db250cm9sbGVyLmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanM/P3JlZi0tMCEuL0Zvcm1Db250cm9sbGVyLmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHVnLXBsYWluLWxvYWRlci9pbmRleC5qcyEuL0Zvcm1Db250cm9sbGVyLnB1Zz92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zOTk3Y2Y1MCZsYW5nPXB1ZyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRm9ybUNvbnRyb2xsZXIucHVnP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM5OTdjZjUwJmxhbmc9cHVnJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0Zvcm1Db250cm9sbGVyLmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Gb3JtQ29udHJvbGxlci5qcz92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2Rhbmtld2Fzc2VyL0RvY3VtZW50cy9HaXQvZW5lY2hhbmdlL2NvZGluZy1jaGFsbGVuZ2UvZnJvbnRlbmRfY2hhbGxlbmdlXzEvY2hhbGxlbmdlcy9kYW5rZXdhc3Nlci9fZGV2L25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzM5OTdjZjUwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzM5OTdjZjUwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzM5OTdjZjUwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Gb3JtQ29udHJvbGxlci5wdWc/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Mzk5N2NmNTAmbGFuZz1wdWcmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMzk5N2NmNTAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImpzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL0Zvcm1Db250cm9sbGVyLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcz8/cmVmLS0wIS4vSW5wdXRUZXh0LmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanM/P3JlZi0tMCEuL0lucHV0VGV4dC5qcz92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3B1Zy1wbGFpbi1sb2FkZXIvaW5kZXguanMhLi9JbnB1dFRleHQucHVnP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMxMGJjNDE2Jmxhbmc9cHVnJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9JbnB1dFRleHQucHVnP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMxMGJjNDE2Jmxhbmc9cHVnJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0lucHV0VGV4dC5qcz92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vSW5wdXRUZXh0LmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvZGFua2V3YXNzZXIvRG9jdW1lbnRzL0dpdC9lbmVjaGFuZ2UvY29kaW5nLWNoYWxsZW5nZS9mcm9udGVuZF9jaGFsbGVuZ2VfMS9jaGFsbGVuZ2VzL2Rhbmtld2Fzc2VyL19kZXYvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMzEwYmM0MTYnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMzEwYmM0MTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMzEwYmM0MTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0lucHV0VGV4dC5wdWc/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzEwYmM0MTYmbGFuZz1wdWcmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMzEwYmM0MTYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImpzL19tb2R1bGVzL0Zvcm1Db250cm9sbGVyL2NvbXBvbmVudHMvSW5wdXRUZXh0L0lucHV0VGV4dC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VzbGludC1sb2FkZXIvaW5kZXguanM/P3JlZi0tMCEuL1NlbGVjdC5qcz92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAhLi9TZWxlY3QuanM/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wdWctcGxhaW4tbG9hZGVyL2luZGV4LmpzIS4vU2VsZWN0LnB1Zz92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MjFjMzRlNiZsYW5nPXB1ZyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU2VsZWN0LnB1Zz92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MjFjMzRlNiZsYW5nPXB1ZyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TZWxlY3QuanM/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1NlbGVjdC5qcz92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2Rhbmtld2Fzc2VyL0RvY3VtZW50cy9HaXQvZW5lY2hhbmdlL2NvZGluZy1jaGFsbGVuZ2UvZnJvbnRlbmRfY2hhbGxlbmdlXzEvY2hhbGxlbmdlcy9kYW5rZXdhc3Nlci9fZGV2L25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzUyMWMzNGU2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzUyMWMzNGU2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzUyMWMzNGU2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TZWxlY3QucHVnP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUyMWMzNGU2Jmxhbmc9cHVnJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzUyMWMzNGU2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJqcy9fbW9kdWxlcy9Gb3JtQ29udHJvbGxlci9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLyoqXG4gKiDjgrnjg6Djg7zjgrrjgrnjgq/jg63jg7zjg6tcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJZcbiAgICovXG4gIGluaXQoKSB7XG4gICAgdGhpcy4kYnV0dG9uID0gJCgnLmpzLVNjcm9sbGVyJyk7XG5cbiAgICB0aGlzLiRidXR0b24ub24oJ2NsaWNrJywgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNjcm9sbCgkKGUuY3VycmVudFRhcmdldCkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODreODvOODq+WHpueQhlxuICAgKiBAcGFyYW0gJGVsIHtPYmplY3R9IC0g44Kv44Oq44OD44Kv44GV44KM44Gf6KaB57SgXG4gICAqL1xuICBzY3JvbGwoJGVsKSB7XG4gICAgY29uc3QgaHJlZiA9ICRlbC5hdHRyKCdocmVmJyk7XG4gICAgY29uc3QgdGFyZ2V0SWQgPSAkKGhyZWYgPT09ICcjJyB8fCBocmVmID09PSAnJyA/ICdodG1sJyA6IGhyZWYpO1xuICAgICQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoXG4gICAgICB7XG4gICAgICAgIHNjcm9sbFRvcDogdGFyZ2V0SWQub2Zmc2V0KCkudG9wLFxuICAgICAgfSxcbiAgICAgIDMwMCxcbiAgICAgICdzd2luZydcbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIOOCv+ODluODrOODg+ODiOOBp+OBr3ZpZXdwb3J044KSMTAyNHB444Gr5Zu65a6aXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBjb25zdCBnZXREZXZpY2VUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICBjb25zdCBkZXZpY2VUeXBlcyA9IHt9O1xuICAgIGRldmljZVR5cGVzLmlzSVBob25lID0gL2lQaG9uZS9pLnRlc3QodWEpO1xuICAgIGRldmljZVR5cGVzLmlzSVBhZCA9IC9pUGFkL2kudGVzdCh1YSk7XG4gICAgZGV2aWNlVHlwZXMuaXNXaW5kb3dzUGhvbmUgPSAvV2luZG93cyBQaG9uZS9pLnRlc3QodWEpO1xuICAgIGRldmljZVR5cGVzLmlzV2luZG93c1RhYmxldCA9IC9XaW5kb3dzL2kudGVzdCh1YSkgJiYgL1RvdWNoL2kudGVzdCh1YSkgJiYgIS9UYWJsZXQgUEMvaS50ZXN0KHVhKTtcbiAgICBkZXZpY2VUeXBlcy5pc0FuZHJvaWQgPSAvQW5kcm9pZC9pLnRlc3QodWEpICYmICF1YS5pc1dpbmRvd3NQaG9uZTtcbiAgICBkZXZpY2VUeXBlcy5pc0FuZHJvaWRNb2JpbGUgPSBkZXZpY2VUeXBlcy5pc0FuZHJvaWQgJiYgL01vYmlsZS9pLnRlc3QodWEpO1xuICAgIGRldmljZVR5cGVzLmlzQW5kcm9pZFRhYmxldCA9IGRldmljZVR5cGVzLmlzQW5kcm9pZCAmJiAhZGV2aWNlVHlwZXMuaXNBbmRyb2lkTW9iaWxlO1xuICAgIGRldmljZVR5cGVzLmlzQmxhY2tCZXJyeSA9IC9CbGFja0JlcnJ5Ky9pLnRlc3QodWEpO1xuICAgIGRldmljZVR5cGVzLmlzQmxhY2tCZXJyeVRhYmxldCA9IC9QbGF5Qm9vaysvaS50ZXN0KHVhKTtcblxuICAgIGRldmljZVR5cGVzLmlzTW9iaWxlID1cbiAgICAgIGRldmljZVR5cGVzLmlzSVBob25lIHx8IGRldmljZVR5cGVzLmlzV2luZG93c1Bob25lIHx8IGRldmljZVR5cGVzLmlzQW5kcm9pZE1vYmlsZSB8fCBkZXZpY2VUeXBlcy5pc0JsYWNrQmVycnk7XG4gICAgZGV2aWNlVHlwZXMuaXNUYWJsZXQgPVxuICAgICAgZGV2aWNlVHlwZXMuaXNJUGFkIHx8XG4gICAgICBkZXZpY2VUeXBlcy5pc1dpbmRvd3NUYWJsZXQgfHxcbiAgICAgIGRldmljZVR5cGVzLmlzQW5kcm9pZFRhYmxldCB8fFxuICAgICAgZGV2aWNlVHlwZXMuaXNCbGFja0JlcnJ5VGFibGV0O1xuXG4gICAgcmV0dXJuIGRldmljZVR5cGVzO1xuICB9O1xuXG4gIGlmIChnZXREZXZpY2VUeXBlKCkuaXNUYWJsZXQpICQoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJykuYXR0cignY29udGVudCcsICd3aWR0aD0xMDI0Jyk7XG59XG4iLCIvKipcbiAqIOOCueODqeOCpOODgOODvFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgJCgnLmpzLVNsaWRlcicpLnNsaWNrKHtcbiAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICBhdXRvcGxheVNwZWVkOiA1MDAwLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGFycm93czogdHJ1ZSxcbiAgICB2YXJpYWJsZVdpZHRoOiB0cnVlLFxuICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgcmVzcG9uc2l2ZTogW1xuICAgICAge1xuICAgICAgICBicmVha3BvaW50OiA2OTksXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgIGNlbnRlck1vZGU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufVxuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IEZvcm1Db250cm9sbGVyIGZyb20gJy4vX21vZHVsZXMvRm9ybUNvbnRyb2xsZXIvRm9ybUNvbnRyb2xsZXIudnVlJztcbmltcG9ydCBTbGlkZXIgZnJvbSAnLi9fbW9kdWxlcy9fc2xpZGVyJztcbmltcG9ydCBTY3JvbGxlciBmcm9tICcuL19tb2R1bGVzL19zY3JvbGxlcic7XG5pbXBvcnQgU2V0Vmlld3BvcnQgZnJvbSAnLi9fbW9kdWxlcy9fc2V0Vmlld3BvcnQnO1xuXG53aW5kb3cuUHJvbWlzZSA9IFByb21pc2U7XG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTtcblxuKCgpID0+IHtcbiAgJCgoKSA9PiB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqcy1Gb3JtQ29udHJvbGxlcicpO1xuICAgIGlmIChmb3JtKSB7XG4gICAgICBuZXcgVnVlKHtcbiAgICAgICAgcmVuZGVyOiBoID0+IGgoRm9ybUNvbnRyb2xsZXIpLFxuICAgICAgfSkuJG1vdW50KGZvcm0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcm9sbGVyID0gbmV3IFNjcm9sbGVyKCk7XG4gICAgc2Nyb2xsZXIuaW5pdCgpO1xuXG4gICAgY29uc3Qgc2xpZGVyID0gbmV3IFNsaWRlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIH0pO1xuXG4gIGNvbnN0IHNldFZpZXdwb3J0ID0gbmV3IFNldFZpZXdwb3J0KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbn0pKCk7XG4iLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgSW5wdXRUZXh0IGZyb20gJy4vY29tcG9uZW50cy9JbnB1dFRleHQvSW5wdXRUZXh0LnZ1ZSc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4vY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LnZ1ZSc7XG5pbXBvcnQgeyBmb3JtU2VsZWN0VGFibGUgfSBmcm9tICcuLi8uLi9fZGF0YS9fZm9ybVNlbGVjdFRhYmxlJztcblxud2luZG93LlByb21pc2UgPSBQcm9taXNlO1xuVnVlLmNvbmZpZy5wcm9kdWN0aW9uVGlwID0gZmFsc2U7XG5cbi8qKlxuICog44OV44Kp44O844Og44Kz44Oz44OI44Ot44O844OpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIElucHV0VGV4dCxcbiAgICBTZWxlY3QsXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICog6YO96YGT5bqc55yM44Oq44K544OIXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdExpc3Q6IHtcbiAgICAgICAgcHJvdmlkZXI6IGZvcm1TZWxlY3RUYWJsZS5wcm92aWRlcixcbiAgICAgICAgcHJlZjogZm9ybVNlbGVjdFRhYmxlLnByb3ZpZGVyVG9QcmVmLFxuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICog6YCB5L+h44GZ44KL5YCkXG4gICAgICAgKi9cbiAgICAgIHNlbmRWYWx1ZXM6IHtcbiAgICAgICAgcHJvdmlkZXI6ICd0ZXBjbycsXG4gICAgICAgIHByZWY6ICcnLFxuICAgICAgICBjb21wYW55OiAnJyxcbiAgICAgICAgbmFtZTogJycsXG4gICAgICAgIHBob25lOiAnJyxcbiAgICAgICAgZW1haWw6ICcnLFxuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICog5ZCE44OV44Kj44O844Or44OJ44Gu44OQ44Oq44OH44O844K344On44Oz57WQ5p6cXG4gICAgICAgKi9cbiAgICAgIHZhbGlkYXRlU3RhdHVzOiB7XG4gICAgICAgIHByb3ZpZGVyOiB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlOiAndGV4dCcsXG4gICAgICAgICAgaXNWYWxpZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlZjoge1xuICAgICAgICAgIHZhbGlkYXRlVHlwZTogJ3RleHQnLFxuICAgICAgICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICB2YWxpZGF0ZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlOiAndGV4dCcsXG4gICAgICAgICAgaXNWYWxpZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgcGhvbmU6IHtcbiAgICAgICAgICB2YWxpZGF0ZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBlbWFpbDoge1xuICAgICAgICAgIHZhbGlkYXRlVHlwZTogJ2VtYWlsJyxcbiAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIC8qKlxuICAgICAqIOmbu+WKm+S8muekvuODquOCueODiOOCkui/lOWNtFxuICAgICAqIEByZXR1cm5zIHt7bmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfVtdfVxuICAgICAqL1xuICAgIGdldFByb3ZpZGVyTGlzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdExpc3QucHJvdmlkZXI7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDpg73pgZPlupznnIzjg6rjgrnjg4jjgavjgIzjgYrpgbjjgbPjgY/jgaDjgZXjgYTjgI3jgpLku5jliqDjgZfjgabov5TljbRcbiAgICAgKiBAcmV0dXJucyB7e25hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZ31bXX1cbiAgICAgKi9cbiAgICBnZXRQcmVmTGlzdCgpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn44GK6YG444Gz44GP44Gg44GV44GEJyxcbiAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgIH0sXG4gICAgICBdLmNvbmNhdCh0aGlzLnNlbGVjdExpc3QucHJlZlt0aGlzLnNlbmRWYWx1ZXMucHJvdmlkZXJdLnByZWYpO1xuICAgIH0sXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcbiAgICAgKiDkv53mjIHjgZfjgabjgYTjgovpgIHkv6HjgZnjgovlgKTjgpLlj43mmKDjgZfjgIHljbPmmYLjg5Djg6rjg4fjg7zjgrfjg6fjg7NcbiAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfSAtIOWkieabtOWvvuixoeOBruOCreODvFxuICAgICAqIEBwYXJhbSB2YWx1ZSB7U3RyaW5nfSAtIOWkieabtOOBmeOCi+WApFxuICAgICAqL1xuICAgIGNoYW5nZVNlbmRWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhpcy4kc2V0KHRoaXMuc2VuZFZhbHVlcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy52YWxpZGF0ZShuYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOODquOCueODiOOBjOWkieabtOOBleOCjOOBn+WgtOWQiOOAgeW8leaVsOOBp+S4juOBiOOCieOCjOOBn+ODleOCo+ODvOODq+ODieOCkuWIneacn+WMluOBmeOCi1xuICAgICAqIO+8iOmbu+WKm+S8muekvuOBjOWkieabtOOBleOCjOOCi+WgtOWQiOOBq+mDvemBk+W6nOecjOOCkuWIneacn+WMluOBmeOCi+OBquOBqe+8iVxuICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9IC0g5aSJ5pu05a++6LGh44Gu44Kt44O8XG4gICAgICovXG4gICAgb25DaGFuZ2VMaXN0KG5hbWUpIHtcbiAgICAgIHRoaXMuJHNldCh0aGlzLnNlbmRWYWx1ZXMsIG5hbWUsICcnKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOOBmeOBueOBpuOBruODleOCo+ODvOODq+ODieOBq+WvvuOBl+OBpuODkOODquODh+ODvOOCt+ODp+ODs+OCkuWRvOOBs+WHuuOBmVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSAtIOOBmeOBueOBpuODkOODquODh+ODvOOCt+ODp+ODs+OBjOmAmuOCjOOBsCB0cnVlXG4gICAgICovXG4gICAgdmFsaWRhdGVBbGwoKSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdGhpcy5zZW5kVmFsdWVzKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGUobmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcblxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKHRoaXMudmFsaWRhdGVTdGF0dXMpKSB7XG4gICAgICAgIGlmICghdmFsdWUuaXNWYWxpZCkgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOODleOCo+ODvOODq+ODieOCkuODkOODquODh+ODvOOCt+ODp+ODs+OBmeOCi1xuICAgICAqIEBwYXJhbSBrZXkge1N0cmluZ30gLSDjg5Djg6rjg4fjg7zjgrfjg6fjg7Plr77osaHjga7jg5XjgqPjg7zjg6vjg4nlkI1cbiAgICAgKi9cbiAgICB2YWxpZGF0ZShrZXkpIHtcbiAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG5cbiAgICAgIHN3aXRjaCAodGhpcy52YWxpZGF0ZVN0YXR1c1trZXldLnZhbGlkYXRlVHlwZSkge1xuICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICBpZiAodGhpcy5zZW5kVmFsdWVzW2tleV0gIT09ICcnKSBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW1haWwnOlxuICAgICAgICAgIGlmICh0aGlzLnNlbmRWYWx1ZXNba2V5XS5tYXRjaCgvXlthLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rQFthLXpBLVowLTktXSsoPzpcXC5bYS16QS1aMC05LV0rKSokLykpIHtcbiAgICAgICAgICAgIGlzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kc2V0KHRoaXMudmFsaWRhdGVTdGF0dXNba2V5XSwgJ2lzVmFsaWQnLCBpc1ZhbGlkKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFN1Ym1pdOaZguOBruWHpueQhu+8iOOBmeOBueOBpuOBruODleOCo+ODvOODq+ODieOCkuODkOODquODh+ODvOOCt+ODp+ODs+OBl+OAgeOBneOCjOOBjOmAmuOCjOOBsOmAgeS/oeOBmeOCi++8iVxuICAgICAqL1xuICAgIG9uU3VibWl0KCkge1xuICAgICAgaWYgKHRoaXMudmFsaWRhdGVBbGwoKSkge1xuICAgICAgICBhbGVydCgn5YWl5Yqb44Ko44Op44O844GM44Gq44GE44Gf44KB6YCB5L+h44GX44G+44GZ77yI44OG44K544OI44KG44GI6YCB5L+h44GX44Gq44GE44Gf44KB5Luu44Gr6KGo56S677yJJyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG4iLCIvKipcbiAqIOODhuOCreOCueODiOODleOCo+ODvOODq+ODiVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdJbnB1dFRleHQnLFxuICBwcm9wczoge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgaGVhZGluZzogU3RyaW5nLFxuICAgIHBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gICAgZXJyb3JNZXNzYWdlOiBTdHJpbmcsXG4gICAgY3VycmVudFZhbHVlOiBTdHJpbmcsXG4gICAgaXNWYWxpZDogQm9vbGVhbixcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcbiAgICAgKiDlhaXlipvjgZXjgozjgZ/lgKRcbiAgICAgKi9cbiAgICBpbnB1dHRlZDoge1xuICAgICAgLyoqXG4gICAgICAgKiDnj77lnKjjga7lgKTjgpLov5TljbRcbiAgICAgICAqIEByZXR1cm5zIHsqfFN0cmluZ0NvbnN0cnVjdG9yfFN0cmluZ31cbiAgICAgICAqL1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiDlgKTjgYzlpInjgo/jgaPjgabjgYTjgZ/jgonlpInmm7TjgpLopqrjgavpgJrnn6VcbiAgICAgICAqIEBwYXJhbSB2YWx1ZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXR0ZWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlLXZhbHVlJywgdGhpcy5uYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn07XG4iLCIvKipcbiAqIOOCu+ODrOOCr+ODiOODnOODg+OCr+OCuVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdTZWxlY3QnLFxuICBwcm9wczoge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBoZWFkaW5nOiBTdHJpbmcsXG4gICAgbGlzdDogQXJyYXksXG4gICAgZXJyb3JNZXNzYWdlOiBTdHJpbmcsXG4gICAgY2hpbGRMaXN0OiBTdHJpbmcsXG4gICAgY3VycmVudFZhbHVlOiBTdHJpbmcsXG4gICAgaXNWYWxpZDogQm9vbGVhbixcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICAvKipcbiAgICAgKiDpgbjmip7jgZXjgozjgabjgYTjgovlgKRcbiAgICAgKi9cbiAgICBzZWxlY3RlZDoge1xuICAgICAgLyoqXG4gICAgICAgKiDnj77lnKjjga7lgKTjgpLov5TljbRcbiAgICAgICAqIEByZXR1cm5zIHsqfFN0cmluZ0NvbnN0cnVjdG9yfFN0cmluZ31cbiAgICAgICAqL1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiDlgKTjgYzlpInjgo/jgaPjgabjgYTjgZ/jgonlpInmm7TjgpLopqrjgavpgJrnn6VcbiAgICAgICAqIEBwYXJhbSB2YWx1ZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY2hpbGRMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UtbGlzdCcsIHRoaXMuY2hpbGRMaXN0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UtdmFsdWUnLCB0aGlzLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9LFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImZvcm1cIixcbiAgICB7XG4gICAgICBzdGF0aWNDbGFzczogXCJjLUZvcm0ganMtRm9ybUNvbnRyb2xsZXJfTWFpblwiLFxuICAgICAgb246IHtcbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHJldHVybiBfdm0ub25TdWJtaXQoJGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcImgyXCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX1R0bFwiIH0sIFtcbiAgICAgICAgX3ZtLl92KFwi6Zu75rCX5Luj5LiA5ous6KaL56mN44KK44OV44Kp44O844OgXCIpXG4gICAgICBdKSxcbiAgICAgIF92bS5fbSgwKSxcbiAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9SZXF1aXJlZFNQXCIgfSwgW192bS5fdihcIuOBmeOBueOBpuWFpeWKm+W/hemgiFwiKV0pLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX0JvZHlcIiB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJTZWxlY3RcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgbmFtZTogXCJwcm92aWRlclwiLFxuICAgICAgICAgICAgICBoZWFkaW5nOiAn44GU5aWR57SE5Lit44GuPGJyIGNsYXNzPVwidS1TUFwiPumbu+WKm+S8muekvicsXG4gICAgICAgICAgICAgIGxpc3Q6IF92bS5nZXRQcm92aWRlckxpc3QsXG4gICAgICAgICAgICAgIFwiZXJyb3ItbWVzc2FnZVwiOiBcIumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICAgICAgICBcImNoaWxkLWxpc3RcIjogXCJwcmVmXCIsXG4gICAgICAgICAgICAgIFwiY3VycmVudC12YWx1ZVwiOiBfdm0uc2VuZFZhbHVlcy5wcm92aWRlcixcbiAgICAgICAgICAgICAgXCJpcy12YWxpZFwiOiBfdm0udmFsaWRhdGVTdGF0dXMucHJvdmlkZXIuaXNWYWxpZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIFwiY2hhbmdlLXZhbHVlXCI6IF92bS5jaGFuZ2VTZW5kVmFsdWUsXG4gICAgICAgICAgICAgIFwiY2hhbmdlLWxpc3RcIjogX3ZtLm9uQ2hhbmdlTGlzdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9jKFwiU2VsZWN0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IFwicHJlZlwiLFxuICAgICAgICAgICAgICBoZWFkaW5nOiBcIumDvemBk+W6nOecjFwiLFxuICAgICAgICAgICAgICBsaXN0OiBfdm0uZ2V0UHJlZkxpc3QsXG4gICAgICAgICAgICAgIFwiZXJyb3ItbWVzc2FnZVwiOiBcIumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICAgICAgICBcImNoaWxkLWxpc3RcIjogbnVsbCxcbiAgICAgICAgICAgICAgXCJjdXJyZW50LXZhbHVlXCI6IF92bS5zZW5kVmFsdWVzLnByZWYsXG4gICAgICAgICAgICAgIFwiaXMtdmFsaWRcIjogX3ZtLnZhbGlkYXRlU3RhdHVzLnByZWYuaXNWYWxpZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uOiB7IFwiY2hhbmdlLXZhbHVlXCI6IF92bS5jaGFuZ2VTZW5kVmFsdWUgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9jKFwiSW5wdXRUZXh0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IFwiY29tcGFueVwiLFxuICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgaGVhZGluZzogXCLosrTnpL7lkI1cIixcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwi4peL4peL5qCq5byP5Lya56S+XCIsXG4gICAgICAgICAgICAgIFwiZXJyb3ItbWVzc2FnZVwiOiBcIuato+OBl+OBj+WFpeWKm+OBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQtdmFsdWVcIjogX3ZtLnNlbmRWYWx1ZXMuY29tcGFueSxcbiAgICAgICAgICAgICAgXCJpcy12YWxpZFwiOiBfdm0udmFsaWRhdGVTdGF0dXMuY29tcGFueS5pc1ZhbGlkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb246IHsgXCJjaGFuZ2UtdmFsdWVcIjogX3ZtLmNoYW5nZVNlbmRWYWx1ZSB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2MoXCJJbnB1dFRleHRcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICBoZWFkaW5nOiBcIuOBlOaLheW9k+iAhVwiLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCLjgZTlhaXlipvjgY/jgaDjgZXjgYRcIixcbiAgICAgICAgICAgICAgXCJlcnJvci1tZXNzYWdlXCI6IFwi5q2j44GX44GP5YWl5Yqb44GX44Gm44GP44Gg44GV44GEXCIsXG4gICAgICAgICAgICAgIFwiY3VycmVudC12YWx1ZVwiOiBfdm0uc2VuZFZhbHVlcy5uYW1lLFxuICAgICAgICAgICAgICBcImlzLXZhbGlkXCI6IF92bS52YWxpZGF0ZVN0YXR1cy5uYW1lLmlzVmFsaWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbjogeyBcImNoYW5nZS12YWx1ZVwiOiBfdm0uY2hhbmdlU2VuZFZhbHVlIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfYyhcIklucHV0VGV4dFwiLCB7XG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICBuYW1lOiBcInBob25lXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwidGVsXCIsXG4gICAgICAgICAgICAgIGhlYWRpbmc6IFwi6Zu76Kmx55Wq5Y+3XCIsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjAzLTEyMzQtNTY3OFwiLFxuICAgICAgICAgICAgICBcImVycm9yLW1lc3NhZ2VcIjogXCLmraPjgZfjgY/lhaXlipvjgZfjgabjgY/jgaDjgZXjgYRcIixcbiAgICAgICAgICAgICAgXCJjdXJyZW50LXZhbHVlXCI6IF92bS5zZW5kVmFsdWVzLnBob25lLFxuICAgICAgICAgICAgICBcImlzLXZhbGlkXCI6IF92bS52YWxpZGF0ZVN0YXR1cy5waG9uZS5pc1ZhbGlkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb246IHsgXCJjaGFuZ2UtdmFsdWVcIjogX3ZtLmNoYW5nZVNlbmRWYWx1ZSB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgX2MoXCJJbnB1dFRleHRcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgbmFtZTogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgaGVhZGluZzogXCLjg6Hjg7zjg6vjgqLjg4njg6zjgrlcIixcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwi44Oh44O844Or44Ki44OJ44Os44K5XCIsXG4gICAgICAgICAgICAgIFwiZXJyb3ItbWVzc2FnZVwiOiBcIuato+OBl+OBhOODoeODvOODq+OCouODieODrOOCueOBruW9ouW8j+OBp+WFpeWKm+OBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQtdmFsdWVcIjogX3ZtLnNlbmRWYWx1ZXMuZW1haWwsXG4gICAgICAgICAgICAgIFwiaXMtdmFsaWRcIjogX3ZtLnZhbGlkYXRlU3RhdHVzLmVtYWlsLmlzVmFsaWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbjogeyBcImNoYW5nZS12YWx1ZVwiOiBfdm0uY2hhbmdlU2VuZFZhbHVlIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgICAxXG4gICAgICApLFxuICAgICAgX3ZtLl9tKDEpLFxuICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX05vdGljZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KFwi5Yip55So6KaP57SE44O75YCL5Lq65oOF5aCx44Gr5ZCM5oSP44Gu5LiK6YCB5L+h44GP44Gg44GV44GEXCIpXG4gICAgICBdKVxuICAgIF1cbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX0Rlc2NcIiB9LCBbXG4gICAgICBfdm0uX3YoXCLlhajlm70xNeekvuS7peS4iuOBrumbu+WKm+S8muekvuOBruimi+epjeOCiuOBi+OCiVwiKSxcbiAgICAgIF9jKFwiYnJcIiksXG4gICAgICBfdm0uX3YoXCLoh6rnpL7jgavlkIjjgYbjgoLjga7jgpLpgbjjgbbjgaDjgZHvvIFcIilcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9CdG5BcmVhXCIgfSwgW1xuICAgICAgX2MoXCJidXR0b25cIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fQnRuXCIgfSwgW1xuICAgICAgICBfdm0uX3YoXCLkuIDmi6zopovnqY3jgoLjgorjgZfjgabjgb/jgotcIilcbiAgICAgIF0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX1Jvd0dyb3VwXCIgfSwgW1xuICAgICFfdm0uaXNWYWxpZFxuICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9Sb3cgdC1FcnJvclwiIH0sIFtcbiAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fUm93X0Vycm9yTXNnXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZXJyb3JNZXNzYWdlKSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9Sb3dcIiB9LCBbXG4gICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fTmFtZUNvbCB0LVNtYWxsXCIgfSwgW1xuICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fUmVxdWlyZWRcIiB9LCBbX3ZtLl92KFwi5b+F6aCIXCIpXSksXG4gICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmhlYWRpbmcpKVxuICAgICAgXSksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9JbnB1dENvbFwiIH0sIFtcbiAgICAgICAgX3ZtLnR5cGUgPT09IFwiY2hlY2tib3hcIlxuICAgICAgICAgID8gX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaW5wdXR0ZWQsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImlucHV0dGVkXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImMtRm9ybV9JbnB1dFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IF92bS5uYW1lLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfdm0ucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0uaW5wdXR0ZWQpXG4gICAgICAgICAgICAgICAgICA/IF92bS5faShfdm0uaW5wdXR0ZWQsIG51bGwpID4gLTFcbiAgICAgICAgICAgICAgICAgIDogX3ZtLmlucHV0dGVkXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0uaW5wdXR0ZWQsXG4gICAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KVxuICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLmlucHV0dGVkID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChfdm0uaW5wdXR0ZWQgPSAkJGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsICQkaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdm0uaW5wdXR0ZWQgPSAkJGNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBfdm0udHlwZSA9PT0gXCJyYWRpb1wiXG4gICAgICAgICAgPyBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pbnB1dHRlZCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaW5wdXR0ZWRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX0lucHV0XCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogX3ZtLm5hbWUsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF92bS5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJhZGlvXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgY2hlY2tlZDogX3ZtLl9xKF92bS5pbnB1dHRlZCwgbnVsbCkgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgX3ZtLmlucHV0dGVkID0gbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmlucHV0dGVkLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpbnB1dHRlZFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjLUZvcm1fSW5wdXRcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBfdm0ubmFtZSxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogX3ZtLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIHR5cGU6IF92bS50eXBlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uaW5wdXR0ZWQgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0uaW5wdXR0ZWQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgXSlcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fUm93R3JvdXBcIiB9LCBbXG4gICAgIV92bS5pc1ZhbGlkXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX1JvdyB0LUVycm9yXCIgfSwgW1xuICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9Sb3dfRXJyb3JNc2dcIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5lcnJvck1lc3NhZ2UpKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYy1Gb3JtX1Jvd1wiIH0sIFtcbiAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9OYW1lQ29sIHQtU21hbGxcIiB9LCBbXG4gICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9SZXF1aXJlZFwiIH0sIFtfdm0uX3YoXCLlv4XpoIhcIildKSxcbiAgICAgICAgX2MoXCJzcGFuXCIsIHsgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLmhlYWRpbmcpIH0gfSlcbiAgICAgIF0pLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjLUZvcm1fSW5wdXRDb2xcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwic2VsZWN0XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJzZWxlY3RlZFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjLUZvcm1fU2VsZWN0XCIsXG4gICAgICAgICAgICBhdHRyczogeyBuYW1lOiBcIm5hbWVcIiB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgX3ZtLnNlbGVjdGVkID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsXG4gICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgX3ZtLl9sKF92bS5saXN0LCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gX2MoXCJvcHRpb25cIiwgeyBkb21Qcm9wczogeyB2YWx1ZTogaXRlbS52YWx1ZSB9IH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhpdGVtLm5hbWUpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAwXG4gICAgICAgICksXG4gICAgICAgIF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImMtRm9ybV9BcnJvd1wiIH0pXG4gICAgICBdKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTBcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2VzYXJyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9